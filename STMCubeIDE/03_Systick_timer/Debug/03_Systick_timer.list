
03_Systick_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000550  08000558  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000550  08000550  00001558  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000550  08000550  00001558  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000550  08000558  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000554  08000554  00001554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000558  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000558  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000031c  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000223  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00001ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000071  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010ed  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000769  00000000  00000000  00002cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004234  00000000  00000000  0000343f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000188  00000000  00000000  000076b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00007840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000538 	.word	0x08000538

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000538 	.word	0x08000538

08000204 <init_GP>:
#include "GPIO_Driver.h"


void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt, unsigned short speed)

{
 8000204:	b490      	push	{r4, r7}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4604      	mov	r4, r0
 800020c:	4608      	mov	r0, r1
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	4623      	mov	r3, r4
 8000214:	80fb      	strh	r3, [r7, #6]
 8000216:	4603      	mov	r3, r0
 8000218:	80bb      	strh	r3, [r7, #4]
 800021a:	460b      	mov	r3, r1
 800021c:	807b      	strh	r3, [r7, #2]
 800021e:	4613      	mov	r3, r2
 8000220:	803b      	strh	r3, [r7, #0]
			RCC_AHBH1 |= (1<<(port-1));
 8000222:	4b3d      	ldr	r3, [pc, #244]	@ (8000318 <init_GP+0x114>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	88fa      	ldrh	r2, [r7, #6]
 8000228:	3a01      	subs	r2, #1
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f202 	lsl.w	r2, r1, r2
 8000230:	4611      	mov	r1, r2
 8000232:	4a39      	ldr	r2, [pc, #228]	@ (8000318 <init_GP+0x114>)
 8000234:	430b      	orrs	r3, r1
 8000236:	6013      	str	r3, [r2, #0]
			if(port==1)
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d117      	bne.n	800026e <init_GP+0x6a>
			{
				GPIOAa_MODER &= ~(0x11 << pin*2);
 800023e:	4b37      	ldr	r3, [pc, #220]	@ (800031c <init_GP+0x118>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	88ba      	ldrh	r2, [r7, #4]
 8000244:	0052      	lsls	r2, r2, #1
 8000246:	2111      	movs	r1, #17
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	43d2      	mvns	r2, r2
 800024e:	4611      	mov	r1, r2
 8000250:	4a32      	ldr	r2, [pc, #200]	@ (800031c <init_GP+0x118>)
 8000252:	400b      	ands	r3, r1
 8000254:	6013      	str	r3, [r2, #0]
				GPIOAa_MODER |= (dir << pin*2);
 8000256:	4b31      	ldr	r3, [pc, #196]	@ (800031c <init_GP+0x118>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	8879      	ldrh	r1, [r7, #2]
 800025c:	88ba      	ldrh	r2, [r7, #4]
 800025e:	0052      	lsls	r2, r2, #1
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	4611      	mov	r1, r2
 8000266:	4a2d      	ldr	r2, [pc, #180]	@ (800031c <init_GP+0x118>)
 8000268:	430b      	orrs	r3, r1
 800026a:	6013      	str	r3, [r2, #0]
			{
				GPIODd_MODER &= ~(0x11 << pin*2);
				GPIODd_MODER |= (dir << pin*2);
			}

}
 800026c:	e04f      	b.n	800030e <init_GP+0x10a>
			else if(port==2)
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d117      	bne.n	80002a4 <init_GP+0xa0>
				GPIOBb_MODER &= ~(0x11 << pin*2);
 8000274:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <init_GP+0x11c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	88ba      	ldrh	r2, [r7, #4]
 800027a:	0052      	lsls	r2, r2, #1
 800027c:	2111      	movs	r1, #17
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a26      	ldr	r2, [pc, #152]	@ (8000320 <init_GP+0x11c>)
 8000288:	400b      	ands	r3, r1
 800028a:	6013      	str	r3, [r2, #0]
				GPIOBb_MODER |= (dir << pin*2);
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <init_GP+0x11c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	8879      	ldrh	r1, [r7, #2]
 8000292:	88ba      	ldrh	r2, [r7, #4]
 8000294:	0052      	lsls	r2, r2, #1
 8000296:	fa01 f202 	lsl.w	r2, r1, r2
 800029a:	4611      	mov	r1, r2
 800029c:	4a20      	ldr	r2, [pc, #128]	@ (8000320 <init_GP+0x11c>)
 800029e:	430b      	orrs	r3, r1
 80002a0:	6013      	str	r3, [r2, #0]
}
 80002a2:	e034      	b.n	800030e <init_GP+0x10a>
			else if(port==3)
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	d117      	bne.n	80002da <init_GP+0xd6>
				GPIOCc_MODER &= ~(0x11 << pin*2);
 80002aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000324 <init_GP+0x120>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	88ba      	ldrh	r2, [r7, #4]
 80002b0:	0052      	lsls	r2, r2, #1
 80002b2:	2111      	movs	r1, #17
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	43d2      	mvns	r2, r2
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a19      	ldr	r2, [pc, #100]	@ (8000324 <init_GP+0x120>)
 80002be:	400b      	ands	r3, r1
 80002c0:	6013      	str	r3, [r2, #0]
				GPIOCc_MODER |= (dir << pin*2);
 80002c2:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <init_GP+0x120>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	8879      	ldrh	r1, [r7, #2]
 80002c8:	88ba      	ldrh	r2, [r7, #4]
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	4611      	mov	r1, r2
 80002d2:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <init_GP+0x120>)
 80002d4:	430b      	orrs	r3, r1
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	e019      	b.n	800030e <init_GP+0x10a>
			else if(port == 4)
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d116      	bne.n	800030e <init_GP+0x10a>
				GPIODd_MODER &= ~(0x11 << pin*2);
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <init_GP+0x124>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	88ba      	ldrh	r2, [r7, #4]
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	2111      	movs	r1, #17
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	43d2      	mvns	r2, r2
 80002f0:	4611      	mov	r1, r2
 80002f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000328 <init_GP+0x124>)
 80002f4:	400b      	ands	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
				GPIODd_MODER |= (dir << pin*2);
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <init_GP+0x124>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	8879      	ldrh	r1, [r7, #2]
 80002fe:	88ba      	ldrh	r2, [r7, #4]
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	4611      	mov	r1, r2
 8000308:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <init_GP+0x124>)
 800030a:	430b      	orrs	r3, r1
 800030c:	6013      	str	r3, [r2, #0]
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bc90      	pop	{r4, r7}
 8000316:	4770      	bx	lr
 8000318:	40023830 	.word	0x40023830
 800031c:	40020000 	.word	0x40020000
 8000320:	40020400 	.word	0x40020400
 8000324:	40020800 	.word	0x40020800
 8000328:	40020c00 	.word	0x40020c00

0800032c <GPIO_Write>:

void GPIO_Write(unsigned short port, unsigned short pin,unsigned short state)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	80fb      	strh	r3, [r7, #6]
 8000336:	460b      	mov	r3, r1
 8000338:	80bb      	strh	r3, [r7, #4]
 800033a:	4613      	mov	r3, r2
 800033c:	807b      	strh	r3, [r7, #2]
	unsigned long * ODR;


	if(port ==1)
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d102      	bne.n	800034a <GPIO_Write+0x1e>
	{
		ODR = &GPIOAa_ODR;
 8000344:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <GPIO_Write+0x6c>)
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	e010      	b.n	800036c <GPIO_Write+0x40>
	}
	else if(port == 2)
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	2b02      	cmp	r3, #2
 800034e:	d102      	bne.n	8000356 <GPIO_Write+0x2a>
	{
		ODR = &GPIOBb_ODR;
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <GPIO_Write+0x70>)
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00a      	b.n	800036c <GPIO_Write+0x40>
	}
	else if(port == 3)
 8000356:	88fb      	ldrh	r3, [r7, #6]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d102      	bne.n	8000362 <GPIO_Write+0x36>
	{
		ODR = &GPIOCc_ODR;
 800035c:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <GPIO_Write+0x74>)
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	e004      	b.n	800036c <GPIO_Write+0x40>
	}
	else if(port == 4)
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	2b04      	cmp	r3, #4
 8000366:	d101      	bne.n	800036c <GPIO_Write+0x40>
	{
		ODR = &GPIODd_ODR;
 8000368:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <GPIO_Write+0x78>)
 800036a:	60fb      	str	r3, [r7, #12]
	}

//	state ? (*ODR |= (state<<pin)):(*ODR &= ~(state<<pin));
	if(state == 1)
 800036c:	887b      	ldrh	r3, [r7, #2]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d107      	bne.n	8000382 <GPIO_Write+0x56>
	{
		*ODR = (1<<pin);
 8000372:	88bb      	ldrh	r3, [r7, #4]
 8000374:	2201      	movs	r2, #1
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*ODR &= ~(0<<pin);
	}
}
 8000380:	e003      	b.n	800038a <GPIO_Write+0x5e>
		*ODR &= ~(0<<pin);
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40020014 	.word	0x40020014
 800039c:	40020414 	.word	0x40020414
 80003a0:	40020814 	.word	0x40020814
 80003a4:	40020c00 	.word	0x40020c00

080003a8 <Systick_init>:
 */

#include "Systick_timer.h"
#include "GPIO_Driver.h"
void Systick_init()
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
//	__disable_irq();
	SysTick_CRTL &=0;
 80003ac:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <Systick_init+0x34>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
	SysTick_LOAD |= 0x00FFFFFF;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <Systick_init+0x38>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <Systick_init+0x38>)
 80003b8:	f063 437f 	orn	r3, r3, #4278190080	@ 0xff000000
 80003bc:	6013      	str	r3, [r2, #0]
	SysTick_VAL &= 0;
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <Systick_init+0x3c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
	SysTick_CRTL |= 0x5;
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <Systick_init+0x34>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <Systick_init+0x34>)
 80003ca:	f043 0305 	orr.w	r3, r3, #5
 80003ce:	6013      	str	r3, [r2, #0]
//	__enable_irq();
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000e010 	.word	0xe000e010
 80003e0:	e000e014 	.word	0xe000e014
 80003e4:	e000e018 	.word	0xe000e018

080003e8 <Delay_Mills>:

void Delay_Mills()
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
	int cycles = 18 * 1000;
 80003ee:	f244 6350 	movw	r3, #18000	@ 0x4650
 80003f2:	607b      	str	r3, [r7, #4]
	SysTick_LOAD &= 0x0;
 80003f4:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <Delay_Mills+0x44>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	SysTick_LOAD |= cycles - 1;; //Puting load value to AHB
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <Delay_Mills+0x44>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	3a01      	subs	r2, #1
 8000402:	4611      	mov	r1, r2
 8000404:	4a09      	ldr	r2, [pc, #36]	@ (800042c <Delay_Mills+0x44>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6013      	str	r3, [r2, #0]
	SysTick_VAL &= 0; //current counter to zero
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <Delay_Mills+0x48>)
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
	while(!(SysTick_CRTL & 0x10000));
 8000410:	bf00      	nop
 8000412:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <Delay_Mills+0x4c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f9      	beq.n	8000412 <Delay_Mills+0x2a>


}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	e000e014 	.word	0xe000e014
 8000430:	e000e018 	.word	0xe000e018
 8000434:	e000e010 	.word	0xe000e010

08000438 <Systick_DelayMs>:

//User input delay
void Systick_DelayMs(unsigned int t)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	while(t--)
 8000440:	e001      	b.n	8000446 <Systick_DelayMs+0xe>
	{
		Delay_Mills();
 8000442:	f7ff ffd1 	bl	80003e8 <Delay_Mills>
	while(t--)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	1e5a      	subs	r2, r3, #1
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f8      	bne.n	8000442 <Systick_DelayMs+0xa>
	}
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <main>:
#include "GPIO_Driver.h"
#include "Systick_timer.h"


int main(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af02      	add	r7, sp, #8
	Systick_init();
 8000460:	f7ff ffa2 	bl	80003a8 <Systick_init>
	init_GP(PA, 5, OUT, O_PP, O_FS);
 8000464:	2302      	movs	r3, #2
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2300      	movs	r3, #0
 800046a:	2201      	movs	r2, #1
 800046c:	2105      	movs	r1, #5
 800046e:	2001      	movs	r0, #1
 8000470:	f7ff fec8 	bl	8000204 <init_GP>

	while(1)
	{
		GPIO_Write(PA, 5, 1);
 8000474:	2201      	movs	r2, #1
 8000476:	2105      	movs	r1, #5
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff ff57 	bl	800032c <GPIO_Write>
		Systick_DelayMs(1000);
 800047e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000482:	f7ff ffd9 	bl	8000438 <Systick_DelayMs>
		GPIO_Write(PA, 5, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2105      	movs	r1, #5
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff ff4e 	bl	800032c <GPIO_Write>
		Systick_DelayMs(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000494:	f7ff ffd0 	bl	8000438 <Systick_DelayMs>
		GPIO_Write(PA, 5, 1);
 8000498:	bf00      	nop
 800049a:	e7eb      	b.n	8000474 <main+0x1a>

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	@ (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	@ (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	@ (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	@ (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f000 f811 	bl	80004f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff ffc4 	bl	800045a <main>

080004d2 <LoopForever>:

LoopForever:
  b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004e0:	08000558 	.word	0x08000558
  ldr r2, =_sbss
 80004e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e8:	2000001c 	.word	0x2000001c

080004ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>
	...

080004f0 <__libc_init_array>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000528 <__libc_init_array+0x38>)
 80004f4:	4c0d      	ldr	r4, [pc, #52]	@ (800052c <__libc_init_array+0x3c>)
 80004f6:	1b64      	subs	r4, r4, r5
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	2600      	movs	r6, #0
 80004fc:	42a6      	cmp	r6, r4
 80004fe:	d109      	bne.n	8000514 <__libc_init_array+0x24>
 8000500:	4d0b      	ldr	r5, [pc, #44]	@ (8000530 <__libc_init_array+0x40>)
 8000502:	4c0c      	ldr	r4, [pc, #48]	@ (8000534 <__libc_init_array+0x44>)
 8000504:	f000 f818 	bl	8000538 <_init>
 8000508:	1b64      	subs	r4, r4, r5
 800050a:	10a4      	asrs	r4, r4, #2
 800050c:	2600      	movs	r6, #0
 800050e:	42a6      	cmp	r6, r4
 8000510:	d105      	bne.n	800051e <__libc_init_array+0x2e>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f855 3b04 	ldr.w	r3, [r5], #4
 8000518:	4798      	blx	r3
 800051a:	3601      	adds	r6, #1
 800051c:	e7ee      	b.n	80004fc <__libc_init_array+0xc>
 800051e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000522:	4798      	blx	r3
 8000524:	3601      	adds	r6, #1
 8000526:	e7f2      	b.n	800050e <__libc_init_array+0x1e>
 8000528:	08000550 	.word	0x08000550
 800052c:	08000550 	.word	0x08000550
 8000530:	08000550 	.word	0x08000550
 8000534:	08000554 	.word	0x08000554

08000538 <_init>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr

08000544 <_fini>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr
