
01_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000158  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  08000324  00001324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  00001324  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800031c  0800031c  00001324  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800031c  08000324  00001324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000320  08000320  00001320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000324  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000324  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002c1  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c9  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000016e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002c  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000089  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004db  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005da9  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007a61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  00007aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00007af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000304 	.word	0x08000304

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000304 	.word	0x08000304

08000204 <main>:
#include <stdint.h>
#include "GPIO_Driver.h"


int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0);
 8000208:	4b15      	ldr	r3, [pc, #84]	@ (8000260 <main+0x5c>)
 800020a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800020c:	4a14      	ldr	r2, [pc, #80]	@ (8000260 <main+0x5c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6253      	str	r3, [r2, #36]	@ 0x24
//	init_GP(PA,2,OUT,O_PP,O_HS);
//	RCC_AHBH1 |= (1 << 0);
    GPIOA->MODER &= 0xFFFFF0FF;
 8000214:	4b13      	ldr	r3, [pc, #76]	@ (8000264 <main+0x60>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <main+0x60>)
 800021a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800021e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x10;
 8000220:	4b10      	ldr	r3, [pc, #64]	@ (8000264 <main+0x60>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0f      	ldr	r2, [pc, #60]	@ (8000264 <main+0x60>)
 8000226:	f043 0310 	orr.w	r3, r3, #16
 800022a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1<<2);
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <main+0x60>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	4a0c      	ldr	r2, [pc, #48]	@ (8000264 <main+0x60>)
 8000232:	f023 0304 	bic.w	r3, r3, #4
 8000236:	6053      	str	r3, [r2, #4]
//    GPIOA->OSPEEDER |= 0x2;

    GPIOA->OSPEEDER &= ~(3 << (2 * 2)); // Clear speed bits
 8000238:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <main+0x60>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a09      	ldr	r2, [pc, #36]	@ (8000264 <main+0x60>)
 800023e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000242:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDER |= (2 << (2 * 2)); // Set high speed
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <main+0x60>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4a06      	ldr	r2, [pc, #24]	@ (8000264 <main+0x60>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6093      	str	r3, [r2, #8]

    GPIOA->ODR |= 0x4;
 8000250:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <main+0x60>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a03      	ldr	r2, [pc, #12]	@ (8000264 <main+0x60>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6153      	str	r3, [r2, #20]
    while(1);
 800025c:	bf00      	nop
 800025e:	e7fd      	b.n	800025c <main+0x58>
 8000260:	40023800 	.word	0x40023800
 8000264:	40020000 	.word	0x40020000

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	@ (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800026c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	@ (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	@ (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	@ (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	@ (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	@ (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ffb3 	bl	8000204 <main>

0800029e <LoopForever>:

LoopForever:
  b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ac:	08000324 	.word	0x08000324
  ldr r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	4d0d      	ldr	r5, [pc, #52]	@ (80002f4 <__libc_init_array+0x38>)
 80002c0:	4c0d      	ldr	r4, [pc, #52]	@ (80002f8 <__libc_init_array+0x3c>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	2600      	movs	r6, #0
 80002c8:	42a6      	cmp	r6, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	4d0b      	ldr	r5, [pc, #44]	@ (80002fc <__libc_init_array+0x40>)
 80002ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000300 <__libc_init_array+0x44>)
 80002d0:	f000 f818 	bl	8000304 <_init>
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	10a4      	asrs	r4, r4, #2
 80002d8:	2600      	movs	r6, #0
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e4:	4798      	blx	r3
 80002e6:	3601      	adds	r6, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ee:	4798      	blx	r3
 80002f0:	3601      	adds	r6, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
