
05_POC_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a58  08006a58  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a60  08006a60  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006a68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c48  20000060  08006ac8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ca8  08006ac8  00008ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018731  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003490  00000000  00000000  000207c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00023c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108b  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034b2  00000000  00000000  00026223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188f6  00000000  00000000  000296d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db34d  00000000  00000000  00041fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  0011d35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00123078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068f8 	.word	0x080068f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080068f8 	.word	0x080068f8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <LCD_Send_Cmd>:

#define LCD_BACKLIGHT 0x08
#define ENABLE 0x04

void LCD_Send_Cmd(I2C_HandleTypeDef *hi2c, char cmd)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (cmd & 0xF0);
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	f023 030f 	bic.w	r3, r3, #15
 800054e:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd << 4) & 0xF0);
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u | LCD_BACKLIGHT | ENABLE;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	f043 030c 	orr.w	r3, r3, #12
 800055c:	b2db      	uxtb	r3, r3
 800055e:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u | LCD_BACKLIGHT;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	f043 0308 	orr.w	r3, r3, #8
 8000566:	b2db      	uxtb	r3, r3
 8000568:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l | LCD_BACKLIGHT | ENABLE;
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	f043 030c 	orr.w	r3, r3, #12
 8000570:	b2db      	uxtb	r3, r3
 8000572:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l | LCD_BACKLIGHT;
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	b2db      	uxtb	r3, r3
 800057c:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, data_t, 4, 100);
 800057e:	f107 0208 	add.w	r2, r7, #8
 8000582:	2364      	movs	r3, #100	@ 0x64
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2304      	movs	r3, #4
 8000588:	214e      	movs	r1, #78	@ 0x4e
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f001 f92c 	bl	80017e8 <HAL_I2C_Master_Transmit>
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <LCD_Send_Data>:

void LCD_Send_Data(I2C_HandleTypeDef *hi2c, char data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (data & 0xF0);
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	f023 030f 	bic.w	r3, r3, #15
 80005aa:	73fb      	strb	r3, [r7, #15]
  data_l = ((data << 4) & 0xF0);
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u | LCD_BACKLIGHT | ENABLE | 0x01;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f043 030d 	orr.w	r3, r3, #13
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u | LCD_BACKLIGHT | 0x01;
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	f043 0309 	orr.w	r3, r3, #9
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l | LCD_BACKLIGHT | ENABLE | 0x01;
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f043 030d 	orr.w	r3, r3, #13
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l | LCD_BACKLIGHT | 0x01;
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	f043 0309 	orr.w	r3, r3, #9
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, data_t, 4, 100);
 80005da:	f107 0208 	add.w	r2, r7, #8
 80005de:	2364      	movs	r3, #100	@ 0x64
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2304      	movs	r3, #4
 80005e4:	214e      	movs	r1, #78	@ 0x4e
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 f8fe 	bl	80017e8 <HAL_I2C_Master_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef *hi2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 80005fc:	2032      	movs	r0, #50	@ 0x32
 80005fe:	f000 fce3 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x30);
 8000602:	2130      	movs	r1, #48	@ 0x30
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff99 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(5);
 800060a:	2005      	movs	r0, #5
 800060c:	f000 fcdc 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x30);
 8000610:	2130      	movs	r1, #48	@ 0x30
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff ff92 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fcd5 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x30);
 800061e:	2130      	movs	r1, #48	@ 0x30
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff ff8b 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f000 fcce 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x20); // 4-bit mode
 800062c:	2120      	movs	r1, #32
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff84 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(10);
 8000634:	200a      	movs	r0, #10
 8000636:	f000 fcc7 	bl	8000fc8 <HAL_Delay>

  LCD_Send_Cmd(hi2c, 0x28); // 4-bit, 2 line
 800063a:	2128      	movs	r1, #40	@ 0x28
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ff7d 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fcc0 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x08); // Display OFF
 8000648:	2108      	movs	r1, #8
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff ff76 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fcb9 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x01); // Clear
 8000656:	2101      	movs	r1, #1
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff6f 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(2);
 800065e:	2002      	movs	r0, #2
 8000660:	f000 fcb2 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x06); // Entry mode
 8000664:	2106      	movs	r1, #6
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff68 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fcab 	bl	8000fc8 <HAL_Delay>
  LCD_Send_Cmd(hi2c, 0x0C); // Display ON, cursor OFF
 8000672:	210c      	movs	r1, #12
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff61 	bl	800053c <LCD_Send_Cmd>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <LCD_Send_String>:

void LCD_Send_String(I2C_HandleTypeDef *hi2c, char *str)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
  while (*str) LCD_Send_Data(hi2c, *str++);
 800068c:	e007      	b.n	800069e <LCD_Send_String+0x1c>
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	603a      	str	r2, [r7, #0]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4619      	mov	r1, r3
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff7d 	bl	8000598 <LCD_Send_Data>
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f3      	bne.n	800068e <LCD_Send_String+0xc>
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LCD_Clear>:

void LCD_Clear(I2C_HandleTypeDef *hi2c)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  LCD_Send_Cmd(hi2c, 0x01);
 80006b8:	2101      	movs	r1, #1
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff ff3e 	bl	800053c <LCD_Send_Cmd>
  HAL_Delay(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 fc81 	bl	8000fc8 <HAL_Delay>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <LCD_Set_Cursor>:

void LCD_Set_Cursor(I2C_HandleTypeDef *hi2c, uint8_t row, uint8_t col)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	460b      	mov	r3, r1
 80006d8:	70fb      	strb	r3, [r7, #3]
 80006da:	4613      	mov	r3, r2
 80006dc:	70bb      	strb	r3, [r7, #2]
  uint8_t pos = (row == 1) ? (0x80 + col) : (0xC0 + col);
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d103      	bne.n	80006ec <LCD_Set_Cursor+0x1e>
 80006e4:	78bb      	ldrb	r3, [r7, #2]
 80006e6:	3b80      	subs	r3, #128	@ 0x80
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	e002      	b.n	80006f2 <LCD_Set_Cursor+0x24>
 80006ec:	78bb      	ldrb	r3, [r7, #2]
 80006ee:	3b40      	subs	r3, #64	@ 0x40
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
  LCD_Send_Cmd(hi2c, pos);
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	4619      	mov	r1, r3
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff1f 	bl	800053c <LCD_Send_Cmd>
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <StartTask02>:
  * @brief  The application entry point.
  * @retval int
  */

void StartTask02(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)  // IR output HIGH means hand present
 8000710:	2101      	movs	r1, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <StartTask02+0x2c>)
 8000714:	f000 fef2 	bl	80014fc <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d103      	bne.n	8000726 <StartTask02+0x1e>
    {
      hand_detected = 1;
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <StartTask02+0x30>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e002      	b.n	800072c <StartTask02+0x24>
    }
    else
    {
      hand_detected = 0;
 8000726:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <StartTask02+0x30>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
    }
    osDelay(100);  // Poll every 100ms
 800072c:	2064      	movs	r0, #100	@ 0x64
 800072e:	f003 f9a3 	bl	8003a78 <osDelay>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)  // IR output HIGH means hand present
 8000732:	e7ed      	b.n	8000710 <StartTask02+0x8>
 8000734:	40020000 	.word	0x40020000
 8000738:	20000130 	.word	0x20000130

0800073c <StartTask03>:
}



void StartTask03(void *argument)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000744:	2108      	movs	r1, #8
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <StartTask03+0x38>)
 8000748:	f002 fac8 	bl	8002cdc <HAL_TIM_PWM_Start>

  for(;;)
  {
    if (hand_detected)
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <StartTask03+0x3c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d005      	beq.n	8000762 <StartTask03+0x26>
    {
      // Open servo
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500); // Mid position, adjust for your servo
 8000756:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <StartTask03+0x38>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000760:	e004      	b.n	800076c <StartTask03+0x30>
    }
    else
    {
      // Close servo
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500); // Closed position, adjust as needed
 8000762:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <StartTask03+0x38>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    osDelay(100);
 800076c:	2064      	movs	r0, #100	@ 0x64
 800076e:	f003 f983 	bl	8003a78 <osDelay>
    if (hand_detected)
 8000772:	e7eb      	b.n	800074c <StartTask03+0x10>
 8000774:	200000d0 	.word	0x200000d0
 8000778:	20000130 	.word	0x20000130

0800077c <StartTask04>:
  }
}


void StartTask04(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  LCD_Init(&hi2c1);
 8000784:	4812      	ldr	r0, [pc, #72]	@ (80007d0 <StartTask04+0x54>)
 8000786:	f7ff ff35 	bl	80005f4 <LCD_Init>
  LCD_Clear(&hi2c1);
 800078a:	4811      	ldr	r0, [pc, #68]	@ (80007d0 <StartTask04+0x54>)
 800078c:	f7ff ff90 	bl	80006b0 <LCD_Clear>

  for(;;)
  {
    LCD_Clear(&hi2c1);
 8000790:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <StartTask04+0x54>)
 8000792:	f7ff ff8d 	bl	80006b0 <LCD_Clear>

    if (hand_detected)
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <StartTask04+0x58>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <StartTask04+0x38>
    {
      LCD_Set_Cursor(&hi2c1, 1, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2101      	movs	r1, #1
 80007a4:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <StartTask04+0x54>)
 80007a6:	f7ff ff92 	bl	80006ce <LCD_Set_Cursor>
//      LCD_Send_String(&hi2c1, "Dispensing...");
      LCD_Send_String(&hi2c1, "Place Hand");
 80007aa:	490b      	ldr	r1, [pc, #44]	@ (80007d8 <StartTask04+0x5c>)
 80007ac:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <StartTask04+0x54>)
 80007ae:	f7ff ff68 	bl	8000682 <LCD_Send_String>
 80007b2:	e008      	b.n	80007c6 <StartTask04+0x4a>
    }
    else
    {
      LCD_Set_Cursor(&hi2c1, 1, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2101      	movs	r1, #1
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <StartTask04+0x54>)
 80007ba:	f7ff ff88 	bl	80006ce <LCD_Set_Cursor>
//      LCD_Send_String(&hi2c1, "Place Hand");
      LCD_Send_String(&hi2c1, "Dispensing...");
 80007be:	4907      	ldr	r1, [pc, #28]	@ (80007dc <StartTask04+0x60>)
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <StartTask04+0x54>)
 80007c2:	f7ff ff5e 	bl	8000682 <LCD_Send_String>
    }

    osDelay(500);  // Update every 0.5 sec
 80007c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ca:	f003 f955 	bl	8003a78 <osDelay>
    LCD_Clear(&hi2c1);
 80007ce:	e7df      	b.n	8000790 <StartTask04+0x14>
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	20000130 	.word	0x20000130
 80007d8:	0800695c 	.word	0x0800695c
 80007dc:	08006968 	.word	0x08006968

080007e0 <main>:
  }
}


int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fbae 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f85c 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 f950 	bl	8000a90 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007f0:	f000 f8c6 	bl	8000980 <MX_I2C1_Init>
  MX_TIM3_Init();
 80007f4:	f000 f8f2 	bl	80009dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f8:	f003 f862 	bl	80038c0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ServoSemaphore */
  ServoSemaphoreHandle = osSemaphoreNew(1, 1, &ServoSemaphore_attributes);
 80007fc:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <main+0x84>)
 80007fe:	2101      	movs	r1, #1
 8000800:	2001      	movs	r0, #1
 8000802:	f003 f954 	bl	8003aae <osSemaphoreNew>
 8000806:	4603      	mov	r3, r0
 8000808:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <main+0x88>)
 800080a:	6013      	str	r3, [r2, #0]

  /* creation of LCDSemaphore */
  LCDSemaphoreHandle = osSemaphoreNew(1, 1, &LCDSemaphore_attributes);
 800080c:	4a17      	ldr	r2, [pc, #92]	@ (800086c <main+0x8c>)
 800080e:	2101      	movs	r1, #1
 8000810:	2001      	movs	r0, #1
 8000812:	f003 f94c 	bl	8003aae <osSemaphoreNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a15      	ldr	r2, [pc, #84]	@ (8000870 <main+0x90>)
 800081a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800081c:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <main+0x94>)
 800081e:	2100      	movs	r1, #0
 8000820:	4815      	ldr	r0, [pc, #84]	@ (8000878 <main+0x98>)
 8000822:	f003 f897 	bl	8003954 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <main+0x9c>)
 800082a:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(StartTask02, NULL, &SensorTask_attributes);
 800082c:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <main+0xa0>)
 800082e:	2100      	movs	r1, #0
 8000830:	4814      	ldr	r0, [pc, #80]	@ (8000884 <main+0xa4>)
 8000832:	f003 f88f 	bl	8003954 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a13      	ldr	r2, [pc, #76]	@ (8000888 <main+0xa8>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartTask03, NULL, &ServoTask_attributes);
 800083c:	4a13      	ldr	r2, [pc, #76]	@ (800088c <main+0xac>)
 800083e:	2100      	movs	r1, #0
 8000840:	4813      	ldr	r0, [pc, #76]	@ (8000890 <main+0xb0>)
 8000842:	f003 f887 	bl	8003954 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <main+0xb4>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartTask04, NULL, &LCDTask_attributes);
 800084c:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <main+0xb8>)
 800084e:	2100      	movs	r1, #0
 8000850:	4812      	ldr	r0, [pc, #72]	@ (800089c <main+0xbc>)
 8000852:	f003 f87f 	bl	8003954 <osThreadNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <main+0xc0>)
 800085a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800085c:	f003 f854 	bl	8003908 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <main+0x80>
 8000864:	08006a20 	.word	0x08006a20
 8000868:	20000128 	.word	0x20000128
 800086c:	08006a30 	.word	0x08006a30
 8000870:	2000012c 	.word	0x2000012c
 8000874:	08006990 	.word	0x08006990
 8000878:	08000ba9 	.word	0x08000ba9
 800087c:	20000118 	.word	0x20000118
 8000880:	080069b4 	.word	0x080069b4
 8000884:	08000709 	.word	0x08000709
 8000888:	2000011c 	.word	0x2000011c
 800088c:	080069d8 	.word	0x080069d8
 8000890:	0800073d 	.word	0x0800073d
 8000894:	20000120 	.word	0x20000120
 8000898:	080069fc 	.word	0x080069fc
 800089c:	0800077d 	.word	0x0800077d
 80008a0:	20000124 	.word	0x20000124

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	@ 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 ff30 	bl	8006718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <SystemClock_Config+0xd4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <SystemClock_Config+0xd4>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <SystemClock_Config+0xd4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b24      	ldr	r3, [pc, #144]	@ (800097c <SystemClock_Config+0xd8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f0:	4a22      	ldr	r2, [pc, #136]	@ (800097c <SystemClock_Config+0xd8>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b20      	ldr	r3, [pc, #128]	@ (800097c <SystemClock_Config+0xd8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	2310      	movs	r3, #16
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000918:	2310      	movs	r3, #16
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000920:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000922:	2304      	movs	r3, #4
 8000924:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fe1a 	bl	800256c <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800093e:	f000 f94d 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2102      	movs	r1, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fa9c 	bl	8001e9c <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800096a:	f000 f937 	bl	8000bdc <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	3750      	adds	r7, #80	@ 0x50
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_I2C1_Init+0x50>)
 8000986:	4a13      	ldr	r2, [pc, #76]	@ (80009d4 <MX_I2C1_Init+0x54>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_I2C1_Init+0x50>)
 800098c:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <MX_I2C1_Init+0x58>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_I2C1_Init+0x50>)
 800099e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009be:	f000 fdcf 	bl	8001560 <HAL_I2C_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c8:	f000 f908 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000007c 	.word	0x2000007c
 80009d4:	40005400 	.word	0x40005400
 80009d8:	000186a0 	.word	0x000186a0

080009dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fe:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a00:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <MX_TIM3_Init+0xb0>)
 8000a02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a06:	2253      	movs	r2, #83	@ 0x53
 8000a08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a24:	4818      	ldr	r0, [pc, #96]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a26:	f002 f909 	bl	8002c3c <HAL_TIM_PWM_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f8d4 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4619      	mov	r1, r3
 8000a42:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a44:	f002 fe68 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a4e:	f000 f8c5 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a52:	2360      	movs	r3, #96	@ 0x60
 8000a54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2208      	movs	r2, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a6a:	f002 faef 	bl	800304c <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a74:	f000 f8b2 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <MX_TIM3_Init+0xac>)
 8000a7a:	f000 f94b 	bl	8000d14 <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	@ 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000d0 	.word	0x200000d0
 8000a8c:	40000400 	.word	0x40000400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a3b      	ldr	r2, [pc, #236]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a34      	ldr	r2, [pc, #208]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a26      	ldr	r2, [pc, #152]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_GPIO_Init+0x10c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000b1c:	4820      	ldr	r0, [pc, #128]	@ (8000ba0 <MX_GPIO_Init+0x110>)
 8000b1e:	f000 fd05 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	481a      	ldr	r0, [pc, #104]	@ (8000ba4 <MX_GPIO_Init+0x114>)
 8000b3a:	f000 fb4b 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4813      	ldr	r0, [pc, #76]	@ (8000ba0 <MX_GPIO_Init+0x110>)
 8000b52:	f000 fb3f 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <MX_GPIO_Init+0x110>)
 8000b72:	f000 fb2f 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000b76:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <MX_GPIO_Init+0x110>)
 8000b90:	f000 fb20 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f002 ff61 	bl	8003a78 <osDelay>
 8000bb6:	e7fb      	b.n	8000bb0 <StartDefaultTask+0x8>

08000bb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d101      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000bca:	f000 f9dd 	bl	8000f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40001000 	.word	0x40001000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_MspInit+0x54>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a11      	ldr	r2, [pc, #68]	@ (8000c3c <HAL_MspInit+0x54>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	210f      	movs	r1, #15
 8000c2a:	f06f 0001 	mvn.w	r0, #1
 8000c2e:	f000 faa7 	bl	8001180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <HAL_I2C_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23c0      	movs	r3, #192	@ 0xc0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <HAL_I2C_MspInit+0x8c>)
 8000c9a:	f000 fa9b 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000ca8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <HAL_TIM_PWM_MspInit+0x3c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10d      	bne.n	8000cfe <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_TIM_PWM_MspInit+0x40>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <HAL_TIM_PWM_MspInit+0x40>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <HAL_TIM_PWM_MspInit+0x40>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40000400 	.word	0x40000400
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <HAL_TIM_MspPostInit+0x68>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d11d      	bne.n	8000d72 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_TIM_MspPostInit+0x6c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <HAL_TIM_MspPostInit+0x6c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_TIM_MspPostInit+0x6c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d52:	2301      	movs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <HAL_TIM_MspPostInit+0x70>)
 8000d6e:	f000 fa31 	bl	80011d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40000400 	.word	0x40000400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020400 	.word	0x40020400

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	@ 0x38
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <HAL_InitTick+0xe4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a32      	ldr	r2, [pc, #200]	@ (8000e6c <HAL_InitTick+0xe4>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <HAL_InitTick+0xe4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db4:	f107 0210 	add.w	r2, r7, #16
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 f972 	bl	80020a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dce:	f001 f957 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8000dd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000dd4:	e004      	b.n	8000de0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dd6:	f001 f953 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000de2:	4a23      	ldr	r2, [pc, #140]	@ (8000e70 <HAL_InitTick+0xe8>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	0c9b      	lsrs	r3, r3, #18
 8000dea:	3b01      	subs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dee:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <HAL_InitTick+0xec>)
 8000df0:	4a21      	ldr	r2, [pc, #132]	@ (8000e78 <HAL_InitTick+0xf0>)
 8000df2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_InitTick+0xec>)
 8000df6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dfa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e74 <HAL_InitTick+0xec>)
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_InitTick+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_InitTick+0xec>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_InitTick+0xec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e14:	4817      	ldr	r0, [pc, #92]	@ (8000e74 <HAL_InitTick+0xec>)
 8000e16:	f001 fe47 	bl	8002aa8 <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d11b      	bne.n	8000e60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e28:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <HAL_InitTick+0xec>)
 8000e2a:	f001 fe97 	bl	8002b5c <HAL_TIM_Base_Start_IT>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d111      	bne.n	8000e60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e3c:	2036      	movs	r0, #54	@ 0x36
 8000e3e:	f000 f9bb 	bl	80011b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d808      	bhi.n	8000e5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	2036      	movs	r0, #54	@ 0x36
 8000e4e:	f000 f997 	bl	8001180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_InitTick+0xf4>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e002      	b.n	8000e60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3738      	adds	r7, #56	@ 0x38
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	431bde83 	.word	0x431bde83
 8000e74:	20000134 	.word	0x20000134
 8000e78:	40001000 	.word	0x40001000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM6_DAC_IRQHandler+0x10>)
 8000ebe:	f001 ffd5 	bl	8002e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000134 	.word	0x20000134

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ef4:	f7ff ffea 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	@ (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f005 fc61 	bl	80067e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fc5d 	bl	80007e0 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f34:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 8000f38:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f3c:	20004ca8 	.word	0x20004ca8

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f8fc 	bl	800116a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f7ff ff08 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fe36 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	2000017c 	.word	0x2000017c

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	2000017c 	.word	0x2000017c

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	@ (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	@ (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	@ (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4c 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001192:	f7ff ff61 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f7ff ffb1 	bl	8001104 <NVIC_EncodePriority>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff80 	bl	80010b0 <__NVIC_SetPriority>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff54 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e165      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8154 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80ae 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b5d      	ldr	r3, [pc, #372]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a5c      	ldr	r2, [pc, #368]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b5a      	ldr	r3, [pc, #360]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a58      	ldr	r2, [pc, #352]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <HAL_GPIO_Init+0x308>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	@ (80014e4 <HAL_GPIO_Init+0x310>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	@ (80014e8 <HAL_GPIO_Init+0x314>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4b      	ldr	r2, [pc, #300]	@ (80014ec <HAL_GPIO_Init+0x318>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x20a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <HAL_GPIO_Init+0x31c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x206>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a49      	ldr	r2, [pc, #292]	@ (80014f4 <HAL_GPIO_Init+0x320>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x202>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a31      	ldr	r2, [pc, #196]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a26      	ldr	r2, [pc, #152]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001486:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b0:	4a11      	ldr	r2, [pc, #68]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae96 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	@ 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40013c00 	.word	0x40013c00

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e001      	b.n	800151e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e12b      	b.n	80017ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fb5a 	bl	8000c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	@ 0x24
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c4:	f000 fd5c 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a81      	ldr	r2, [pc, #516]	@ (80017d4 <HAL_I2C_Init+0x274>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d807      	bhi.n	80015e4 <HAL_I2C_Init+0x84>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a80      	ldr	r2, [pc, #512]	@ (80017d8 <HAL_I2C_Init+0x278>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf94      	ite	ls
 80015dc:	2301      	movls	r3, #1
 80015de:	2300      	movhi	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	e006      	b.n	80015f2 <HAL_I2C_Init+0x92>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a7d      	ldr	r2, [pc, #500]	@ (80017dc <HAL_I2C_Init+0x27c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bf94      	ite	ls
 80015ec:	2301      	movls	r3, #1
 80015ee:	2300      	movhi	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e7      	b.n	80017ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4a78      	ldr	r2, [pc, #480]	@ (80017e0 <HAL_I2C_Init+0x280>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a6a      	ldr	r2, [pc, #424]	@ (80017d4 <HAL_I2C_Init+0x274>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d802      	bhi.n	8001634 <HAL_I2C_Init+0xd4>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3301      	adds	r3, #1
 8001632:	e009      	b.n	8001648 <HAL_I2C_Init+0xe8>
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	4a69      	ldr	r2, [pc, #420]	@ (80017e4 <HAL_I2C_Init+0x284>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	3301      	adds	r3, #1
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	430b      	orrs	r3, r1
 800164e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800165a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	495c      	ldr	r1, [pc, #368]	@ (80017d4 <HAL_I2C_Init+0x274>)
 8001664:	428b      	cmp	r3, r1
 8001666:	d819      	bhi.n	800169c <HAL_I2C_Init+0x13c>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e59      	subs	r1, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fbb1 f3f3 	udiv	r3, r1, r3
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800167c:	400b      	ands	r3, r1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <HAL_I2C_Init+0x138>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e59      	subs	r1, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001690:	3301      	adds	r3, #1
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	e051      	b.n	800173c <HAL_I2C_Init+0x1dc>
 8001698:	2304      	movs	r3, #4
 800169a:	e04f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_I2C_Init+0x168>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e012      	b.n	80016ee <HAL_I2C_Init+0x18e>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	0099      	lsls	r1, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Init+0x196>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e022      	b.n	800173c <HAL_I2C_Init+0x1dc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10e      	bne.n	800171c <HAL_I2C_Init+0x1bc>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e58      	subs	r0, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800171a:	e00f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6809      	ldr	r1, [r1, #0]
 8001740:	4313      	orrs	r3, r2
 8001742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800176a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6911      	ldr	r1, [r2, #16]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68d2      	ldr	r2, [r2, #12]
 8001776:	4311      	orrs	r1, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	000186a0 	.word	0x000186a0
 80017d8:	001e847f 	.word	0x001e847f
 80017dc:	003d08ff 	.word	0x003d08ff
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
 80017f8:	4613      	mov	r3, r2
 80017fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fbd8 	bl	8000fb0 <HAL_GetTick>
 8001800:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b20      	cmp	r3, #32
 800180c:	f040 80e0 	bne.w	80019d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2319      	movs	r3, #25
 8001816:	2201      	movs	r2, #1
 8001818:	4970      	ldr	r1, [pc, #448]	@ (80019dc <HAL_I2C_Master_Transmit+0x1f4>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f964 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001826:	2302      	movs	r3, #2
 8001828:	e0d3      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_I2C_Master_Transmit+0x50>
 8001834:	2302      	movs	r3, #2
 8001836:	e0cc      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b01      	cmp	r3, #1
 800184c:	d007      	beq.n	800185e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800186c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2221      	movs	r2, #33	@ 0x21
 8001872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2210      	movs	r2, #16
 800187a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	893a      	ldrh	r2, [r7, #8]
 800188e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4a50      	ldr	r2, [pc, #320]	@ (80019e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800189e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a0:	8979      	ldrh	r1, [r7, #10]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f89c 	bl	80019e4 <I2C_MasterRequestWrite>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e08d      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018cc:	e066      	b.n	800199c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	6a39      	ldr	r1, [r7, #32]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 fa22 	bl	8001d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d107      	bne.n	80018f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06b      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b04      	cmp	r3, #4
 8001936:	d11b      	bne.n	8001970 <HAL_I2C_Master_Transmit+0x188>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d017      	beq.n	8001970 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	6a39      	ldr	r1, [r7, #32]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fa19 	bl	8001dac <I2C_WaitOnBTFFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	2b04      	cmp	r3, #4
 8001986:	d107      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001996:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e01a      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d194      	bne.n	80018ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019d0:	2302      	movs	r3, #2
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	00100002 	.word	0x00100002
 80019e0:	ffff0000 	.word	0xffff0000

080019e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	460b      	mov	r3, r1
 80019f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d006      	beq.n	8001a0e <I2C_MasterRequestWrite+0x2a>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d003      	beq.n	8001a0e <I2C_MasterRequestWrite+0x2a>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a0c:	d108      	bne.n	8001a20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e00b      	b.n	8001a38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	2b12      	cmp	r3, #18
 8001a26:	d107      	bne.n	8001a38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f84f 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00d      	beq.n	8001a6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a5e:	d103      	bne.n	8001a68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e035      	b.n	8001ad8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a74:	d108      	bne.n	8001a88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	e01b      	b.n	8001ac0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	11db      	asrs	r3, r3, #7
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 0306 	and.w	r3, r3, #6
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f063 030f 	orn	r3, r3, #15
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	490e      	ldr	r1, [pc, #56]	@ (8001ae0 <I2C_MasterRequestWrite+0xfc>)
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f898 	bl	8001bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e010      	b.n	8001ad8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ab6:	897b      	ldrh	r3, [r7, #10]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4907      	ldr	r1, [pc, #28]	@ (8001ae4 <I2C_MasterRequestWrite+0x100>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f888 	bl	8001bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	00010008 	.word	0x00010008
 8001ae4:	00010002 	.word	0x00010002

08001ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af8:	e048      	b.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d044      	beq.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b02:	f7ff fa55 	bl	8000fb0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d302      	bcc.n	8001b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d139      	bne.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	0c1b      	lsrs	r3, r3, #16
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10d      	bne.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	e00c      	b.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	43da      	mvns	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d116      	bne.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e023      	b.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10d      	bne.n	8001bb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	e00c      	b.n	8001bcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d093      	beq.n	8001afa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bea:	e071      	b.n	8001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfa:	d123      	bne.n	8001c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e067      	b.n	8001d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4a:	d041      	beq.n	8001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4c:	f7ff f9b0 	bl	8000fb0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d302      	bcc.n	8001c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d136      	bne.n	8001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10c      	bne.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4013      	ands	r3, r2
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	e00b      	b.n	8001c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4013      	ands	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f043 0220 	orr.w	r2, r3, #32
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e021      	b.n	8001d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10c      	bne.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e00b      	b.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f af6d 	bne.w	8001bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d28:	e034      	b.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f886 	bl	8001e3c <I2C_IsAcknowledgeFailed>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e034      	b.n	8001da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d028      	beq.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7ff f935 	bl	8000fb0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11d      	bne.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d62:	2b80      	cmp	r3, #128	@ 0x80
 8001d64:	d016      	beq.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e007      	b.n	8001da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9e:	2b80      	cmp	r3, #128	@ 0x80
 8001da0:	d1c3      	bne.n	8001d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001db8:	e034      	b.n	8001e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f83e 	bl	8001e3c <I2C_IsAcknowledgeFailed>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e034      	b.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d028      	beq.n	8001e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd2:	f7ff f8ed 	bl	8000fb0 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d302      	bcc.n	8001de8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11d      	bne.n	8001e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d016      	beq.n	8001e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f043 0220 	orr.w	r2, r3, #32
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e007      	b.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d1c3      	bne.n	8001dba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e52:	d11b      	bne.n	8001e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	f043 0204 	orr.w	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0cc      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b68      	ldr	r3, [pc, #416]	@ (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b65      	ldr	r3, [pc, #404]	@ (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b63      	ldr	r3, [pc, #396]	@ (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b8      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef0:	4b59      	ldr	r3, [pc, #356]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f08:	4b53      	ldr	r3, [pc, #332]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b50      	ldr	r3, [pc, #320]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	494d      	ldr	r1, [pc, #308]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d044      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d119      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e07f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e067      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4934      	ldr	r1, [pc, #208]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff f810 	bl	8000fb0 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff f80c 	bl	8000fb0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e04f      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d20c      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e032      	b.n	800204a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4916      	ldr	r1, [pc, #88]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	490e      	ldr	r1, [pc, #56]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002022:	f000 f873 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8002026:	4602      	mov	r2, r0
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	490a      	ldr	r1, [pc, #40]	@ (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	5ccb      	ldrb	r3, [r1, r3]
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a09      	ldr	r2, [pc, #36]	@ (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fea0 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00
 8002058:	40023800 	.word	0x40023800
 800205c:	08006a40 	.word	0x08006a40
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002084:	f7ff fff0 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4903      	ldr	r1, [pc, #12]	@ (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08006a50 	.word	0x08006a50

080020a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	220f      	movs	r2, #15
 80020b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0203 	and.w	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020dc:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_RCC_GetClockConfig+0x60>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 020f 	and.w	r2, r3, #15
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	601a      	str	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40023c00 	.word	0x40023c00

0800210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002110:	b0ae      	sub	sp, #184	@ 0xb8
 8002112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002132:	4bcb      	ldr	r3, [pc, #812]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b0c      	cmp	r3, #12
 800213c:	f200 8206 	bhi.w	800254c <HAL_RCC_GetSysClockFreq+0x440>
 8002140:	a201      	add	r2, pc, #4	@ (adr r2, 8002148 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	0800217d 	.word	0x0800217d
 800214c:	0800254d 	.word	0x0800254d
 8002150:	0800254d 	.word	0x0800254d
 8002154:	0800254d 	.word	0x0800254d
 8002158:	08002185 	.word	0x08002185
 800215c:	0800254d 	.word	0x0800254d
 8002160:	0800254d 	.word	0x0800254d
 8002164:	0800254d 	.word	0x0800254d
 8002168:	0800218d 	.word	0x0800218d
 800216c:	0800254d 	.word	0x0800254d
 8002170:	0800254d 	.word	0x0800254d
 8002174:	0800254d 	.word	0x0800254d
 8002178:	0800237d 	.word	0x0800237d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4bb9      	ldr	r3, [pc, #740]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x358>)
 800217e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002182:	e1e7      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4bb8      	ldr	r3, [pc, #736]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800218a:	e1e3      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800218c:	4bb4      	ldr	r3, [pc, #720]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002198:	4bb1      	ldr	r3, [pc, #708]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d071      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a4:	4bae      	ldr	r3, [pc, #696]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021ca:	4622      	mov	r2, r4
 80021cc:	462b      	mov	r3, r5
 80021ce:	f04f 0000 	mov.w	r0, #0
 80021d2:	f04f 0100 	mov.w	r1, #0
 80021d6:	0159      	lsls	r1, r3, #5
 80021d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021dc:	0150      	lsls	r0, r2, #5
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4621      	mov	r1, r4
 80021e4:	1a51      	subs	r1, r2, r1
 80021e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80021e8:	4629      	mov	r1, r5
 80021ea:	eb63 0301 	sbc.w	r3, r3, r1
 80021ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80021fc:	4649      	mov	r1, r9
 80021fe:	018b      	lsls	r3, r1, #6
 8002200:	4641      	mov	r1, r8
 8002202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002206:	4641      	mov	r1, r8
 8002208:	018a      	lsls	r2, r1, #6
 800220a:	4641      	mov	r1, r8
 800220c:	1a51      	subs	r1, r2, r1
 800220e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002210:	4649      	mov	r1, r9
 8002212:	eb63 0301 	sbc.w	r3, r3, r1
 8002216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002224:	4649      	mov	r1, r9
 8002226:	00cb      	lsls	r3, r1, #3
 8002228:	4641      	mov	r1, r8
 800222a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800222e:	4641      	mov	r1, r8
 8002230:	00ca      	lsls	r2, r1, #3
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	4603      	mov	r3, r0
 8002238:	4622      	mov	r2, r4
 800223a:	189b      	adds	r3, r3, r2
 800223c:	633b      	str	r3, [r7, #48]	@ 0x30
 800223e:	462b      	mov	r3, r5
 8002240:	460a      	mov	r2, r1
 8002242:	eb42 0303 	adc.w	r3, r2, r3
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002254:	4629      	mov	r1, r5
 8002256:	024b      	lsls	r3, r1, #9
 8002258:	4621      	mov	r1, r4
 800225a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800225e:	4621      	mov	r1, r4
 8002260:	024a      	lsls	r2, r1, #9
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800226a:	2200      	movs	r2, #0
 800226c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002270:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002274:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002278:	f7fd ffca 	bl	8000210 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4613      	mov	r3, r2
 8002282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002286:	e067      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002288:	4b75      	ldr	r3, [pc, #468]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	2200      	movs	r2, #0
 8002290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002294:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022a2:	2300      	movs	r3, #0
 80022a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022bc:	0150      	lsls	r0, r2, #5
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4621      	mov	r1, r4
 80022c4:	1a51      	subs	r1, r2, r1
 80022c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022c8:	4629      	mov	r1, r5
 80022ca:	eb63 0301 	sbc.w	r3, r3, r1
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022dc:	4649      	mov	r1, r9
 80022de:	018b      	lsls	r3, r1, #6
 80022e0:	4641      	mov	r1, r8
 80022e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e6:	4641      	mov	r1, r8
 80022e8:	018a      	lsls	r2, r1, #6
 80022ea:	4641      	mov	r1, r8
 80022ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80022f0:	4649      	mov	r1, r9
 80022f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002302:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800230a:	4692      	mov	sl, r2
 800230c:	469b      	mov	fp, r3
 800230e:	4623      	mov	r3, r4
 8002310:	eb1a 0303 	adds.w	r3, sl, r3
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	462b      	mov	r3, r5
 8002318:	eb4b 0303 	adc.w	r3, fp, r3
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800232a:	4629      	mov	r1, r5
 800232c:	028b      	lsls	r3, r1, #10
 800232e:	4621      	mov	r1, r4
 8002330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002334:	4621      	mov	r1, r4
 8002336:	028a      	lsls	r2, r1, #10
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002340:	2200      	movs	r2, #0
 8002342:	673b      	str	r3, [r7, #112]	@ 0x70
 8002344:	677a      	str	r2, [r7, #116]	@ 0x74
 8002346:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800234a:	f7fd ff61 	bl	8000210 <__aeabi_uldivmod>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4613      	mov	r3, r2
 8002354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002358:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	3301      	adds	r3, #1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800236a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800236e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800237a:	e0eb      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800237c:	4b38      	ldr	r3, [pc, #224]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002384:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002388:	4b35      	ldr	r3, [pc, #212]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d06b      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002394:	4b32      	ldr	r3, [pc, #200]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x354>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	2200      	movs	r2, #0
 800239c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800239e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80023a8:	2300      	movs	r3, #0
 80023aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80023ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023b0:	4622      	mov	r2, r4
 80023b2:	462b      	mov	r3, r5
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	f04f 0100 	mov.w	r1, #0
 80023bc:	0159      	lsls	r1, r3, #5
 80023be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c2:	0150      	lsls	r0, r2, #5
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4621      	mov	r1, r4
 80023ca:	1a51      	subs	r1, r2, r1
 80023cc:	61b9      	str	r1, [r7, #24]
 80023ce:	4629      	mov	r1, r5
 80023d0:	eb63 0301 	sbc.w	r3, r3, r1
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023e2:	4659      	mov	r1, fp
 80023e4:	018b      	lsls	r3, r1, #6
 80023e6:	4651      	mov	r1, sl
 80023e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ec:	4651      	mov	r1, sl
 80023ee:	018a      	lsls	r2, r1, #6
 80023f0:	4651      	mov	r1, sl
 80023f2:	ebb2 0801 	subs.w	r8, r2, r1
 80023f6:	4659      	mov	r1, fp
 80023f8:	eb63 0901 	sbc.w	r9, r3, r1
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002408:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002410:	4690      	mov	r8, r2
 8002412:	4699      	mov	r9, r3
 8002414:	4623      	mov	r3, r4
 8002416:	eb18 0303 	adds.w	r3, r8, r3
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	462b      	mov	r3, r5
 800241e:	eb49 0303 	adc.w	r3, r9, r3
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002430:	4629      	mov	r1, r5
 8002432:	024b      	lsls	r3, r1, #9
 8002434:	4621      	mov	r1, r4
 8002436:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800243a:	4621      	mov	r1, r4
 800243c:	024a      	lsls	r2, r1, #9
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002446:	2200      	movs	r2, #0
 8002448:	65bb      	str	r3, [r7, #88]	@ 0x58
 800244a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800244c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002450:	f7fd fede 	bl	8000210 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800245e:	e065      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x420>
 8002460:	40023800 	.word	0x40023800
 8002464:	00f42400 	.word	0x00f42400
 8002468:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x458>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2200      	movs	r2, #0
 8002474:	4618      	mov	r0, r3
 8002476:	4611      	mov	r1, r2
 8002478:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800247c:	653b      	str	r3, [r7, #80]	@ 0x50
 800247e:	2300      	movs	r3, #0
 8002480:	657b      	str	r3, [r7, #84]	@ 0x54
 8002482:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002486:	4642      	mov	r2, r8
 8002488:	464b      	mov	r3, r9
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002498:	0150      	lsls	r0, r2, #5
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4641      	mov	r1, r8
 80024a0:	1a51      	subs	r1, r2, r1
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	4649      	mov	r1, r9
 80024a6:	eb63 0301 	sbc.w	r3, r3, r1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024b8:	4659      	mov	r1, fp
 80024ba:	018b      	lsls	r3, r1, #6
 80024bc:	4651      	mov	r1, sl
 80024be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c2:	4651      	mov	r1, sl
 80024c4:	018a      	lsls	r2, r1, #6
 80024c6:	4651      	mov	r1, sl
 80024c8:	1a54      	subs	r4, r2, r1
 80024ca:	4659      	mov	r1, fp
 80024cc:	eb63 0501 	sbc.w	r5, r3, r1
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	00eb      	lsls	r3, r5, #3
 80024da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024de:	00e2      	lsls	r2, r4, #3
 80024e0:	4614      	mov	r4, r2
 80024e2:	461d      	mov	r5, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	18e3      	adds	r3, r4, r3
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	464b      	mov	r3, r9
 80024ec:	eb45 0303 	adc.w	r3, r5, r3
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fe:	4629      	mov	r1, r5
 8002500:	028b      	lsls	r3, r1, #10
 8002502:	4621      	mov	r1, r4
 8002504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002508:	4621      	mov	r1, r4
 800250a:	028a      	lsls	r2, r1, #10
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002514:	2200      	movs	r2, #0
 8002516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002518:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800251a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800251e:	f7fd fe77 	bl	8000210 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4613      	mov	r3, r2
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x458>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0f1b      	lsrs	r3, r3, #28
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800253a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800253e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800254a:	e003      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x45c>)
 800254e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002552:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002558:	4618      	mov	r0, r3
 800255a:	37b8      	adds	r7, #184	@ 0xb8
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400

0800256c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e28d      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8083 	beq.w	8002692 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800258c:	4b94      	ldr	r3, [pc, #592]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b04      	cmp	r3, #4
 8002596:	d019      	beq.n	80025cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002598:	4b91      	ldr	r3, [pc, #580]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030c 	and.w	r3, r3, #12
        || \
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025a4:	4b8e      	ldr	r3, [pc, #568]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025b0:	d00c      	beq.n	80025cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b2:	4b8b      	ldr	r3, [pc, #556]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d112      	bne.n	80025e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	4b84      	ldr	r3, [pc, #528]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05b      	beq.n	8002690 <HAL_RCC_OscConfig+0x124>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d157      	bne.n	8002690 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e25a      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x90>
 80025ee:	4b7c      	ldr	r3, [pc, #496]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a7b      	ldr	r2, [pc, #492]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0xcc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0xb4>
 8002606:	4b76      	ldr	r3, [pc, #472]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a75      	ldr	r2, [pc, #468]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b73      	ldr	r3, [pc, #460]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a72      	ldr	r2, [pc, #456]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xcc>
 8002620:	4b6f      	ldr	r3, [pc, #444]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a6e      	ldr	r2, [pc, #440]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b6c      	ldr	r3, [pc, #432]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6b      	ldr	r2, [pc, #428]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fcb6 	bl	8000fb0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7fe fcb2 	bl	8000fb0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	@ 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e21f      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0xdc>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fca2 	bl	8000fb0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7fe fc9e 	bl	8000fb0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e20b      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	4b57      	ldr	r3, [pc, #348]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x104>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06f      	beq.n	800277e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800269e:	4b50      	ldr	r3, [pc, #320]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d017      	beq.n	80026da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026aa:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026b6:	4b4a      	ldr	r3, [pc, #296]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d11c      	bne.n	8002708 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b44      	ldr	r3, [pc, #272]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d116      	bne.n	8002708 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x186>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1d3      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4937      	ldr	r1, [pc, #220]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	e03a      	b.n	800277e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002710:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <HAL_RCC_OscConfig+0x278>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe fc4b 	bl	8000fb0 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271e:	f7fe fc47 	bl	8000fb0 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1b4      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b28      	ldr	r3, [pc, #160]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4925      	ldr	r1, [pc, #148]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e015      	b.n	800277e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <HAL_RCC_OscConfig+0x278>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fc2a 	bl	8000fb0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002760:	f7fe fc26 	bl	8000fb0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e193      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d036      	beq.n	80027f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_RCC_OscConfig+0x27c>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fc0a 	bl	8000fb0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe fc06 	bl	8000fb0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e173      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x234>
 80027be:	e01b      	b.n	80027f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_OscConfig+0x27c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fbf3 	bl	8000fb0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	e00e      	b.n	80027ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ce:	f7fe fbef 	bl	8000fb0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d907      	bls.n	80027ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e15c      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	42470000 	.word	0x42470000
 80027e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ea      	bne.n	80027ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8097 	beq.w	8002934 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b83      	ldr	r3, [pc, #524]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b7c      	ldr	r3, [pc, #496]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b79      	ldr	r3, [pc, #484]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b76      	ldr	r3, [pc, #472]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7fe fbaf 	bl	8000fb0 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7fe fbab 	bl	8000fb0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e118      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b6c      	ldr	r3, [pc, #432]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x31e>
 800287c:	4b66      	ldr	r3, [pc, #408]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002880:	4a65      	ldr	r2, [pc, #404]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	@ 0x70
 8002888:	e01c      	b.n	80028c4 <HAL_RCC_OscConfig+0x358>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x340>
 8002892:	4b61      	ldr	r3, [pc, #388]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	4a60      	ldr	r2, [pc, #384]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6713      	str	r3, [r2, #112]	@ 0x70
 800289e:	4b5e      	ldr	r3, [pc, #376]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0x358>
 80028ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	4a59      	ldr	r2, [pc, #356]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b8:	4b57      	ldr	r3, [pc, #348]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a56      	ldr	r2, [pc, #344]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fb70 	bl	8000fb0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fb6c 	bl	8000fb0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0d7      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ee      	beq.n	80028d4 <HAL_RCC_OscConfig+0x368>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fb5a 	bl	8000fb0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe fb56 	bl	8000fb0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0c1      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	4b40      	ldr	r3, [pc, #256]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ee      	bne.n	8002900 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b3b      	ldr	r3, [pc, #236]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80ad 	beq.w	8002a98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293e:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d060      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d145      	bne.n	80029de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b33      	ldr	r3, [pc, #204]	@ (8002a20 <HAL_RCC_OscConfig+0x4b4>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fb2a 	bl	8000fb0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fb26 	bl	8000fb0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e093      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b29      	ldr	r3, [pc, #164]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	071b      	lsls	r3, r3, #28
 80029aa:	491b      	ldr	r1, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x4b4>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fafb 	bl	8000fb0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe faf7 	bl	8000fb0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e064      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x452>
 80029dc:	e05c      	b.n	8002a98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_RCC_OscConfig+0x4b4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fae4 	bl	8000fb0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe fae0 	bl	8000fb0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04d      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x480>
 8002a0a:	e045      	b.n	8002a98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e040      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a24:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa4 <HAL_RCC_OscConfig+0x538>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d030      	beq.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d129      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d122      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a54:	4013      	ands	r3, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d119      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d10f      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f839 	bl	8002b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fb9a 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e04e      	b.n	8002c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	@ (8002c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9e:	d01d      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	@ (8002c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a18      	ldr	r2, [pc, #96]	@ (8002c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d010      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	e007      	b.n	8002c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40001800 	.word	0x40001800

08002c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e041      	b.n	8002cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe f834 	bl	8000cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f000 fad0 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_TIM_PWM_Start+0x24>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e022      	b.n	8002d46 <HAL_TIM_PWM_Start+0x6a>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d109      	bne.n	8002d1a <HAL_TIM_PWM_Start+0x3e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e015      	b.n	8002d46 <HAL_TIM_PWM_Start+0x6a>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d109      	bne.n	8002d34 <HAL_TIM_PWM_Start+0x58>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e008      	b.n	8002d46 <HAL_TIM_PWM_Start+0x6a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07c      	b.n	8002e48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x82>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d5c:	e013      	b.n	8002d86 <HAL_TIM_PWM_Start+0xaa>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_PWM_Start+0x92>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6c:	e00b      	b.n	8002d86 <HAL_TIM_PWM_Start+0xaa>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_PWM_Start+0xa2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d7c:	e003      	b.n	8002d86 <HAL_TIM_PWM_Start+0xaa>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fc9c 	bl	80036cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2d      	ldr	r2, [pc, #180]	@ (8002e50 <HAL_TIM_PWM_Start+0x174>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_TIM_PWM_Start+0xcc>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <HAL_TIM_PWM_Start+0x178>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_PWM_Start+0xd0>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_TIM_PWM_Start+0xd2>
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <HAL_TIM_PWM_Start+0x174>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x136>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd4:	d01d      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x136>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1f      	ldr	r2, [pc, #124]	@ (8002e58 <HAL_TIM_PWM_Start+0x17c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d018      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x136>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <HAL_TIM_PWM_Start+0x180>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x136>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1c      	ldr	r2, [pc, #112]	@ (8002e60 <HAL_TIM_PWM_Start+0x184>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x136>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a16      	ldr	r2, [pc, #88]	@ (8002e54 <HAL_TIM_PWM_Start+0x178>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x136>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <HAL_TIM_PWM_Start+0x188>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x136>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	@ (8002e68 <HAL_TIM_PWM_Start+0x18c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d111      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b06      	cmp	r3, #6
 8002e22:	d010      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e34:	e007      	b.n	8002e46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40001800 	.word	0x40001800

08002e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0202 	mvn.w	r2, #2
 8002ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f994 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f986 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f997 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d020      	beq.n	8002f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0204 	mvn.w	r2, #4
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f96e 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f960 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f971 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d020      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01b      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0208 	mvn.w	r2, #8
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f948 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f93a 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f94b 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0210 	mvn.w	r2, #16
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f922 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f914 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f925 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fdf0 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fc14 	bl	8003824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8f6 	bl	800320c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0220 	mvn.w	r2, #32
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fbe6 	bl	8003810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003066:	2302      	movs	r3, #2
 8003068:	e0ae      	b.n	80031c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	f200 809f 	bhi.w	80031b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080031b9 	.word	0x080031b9
 8003088:	080031b9 	.word	0x080031b9
 800308c:	080031b9 	.word	0x080031b9
 8003090:	080030f5 	.word	0x080030f5
 8003094:	080031b9 	.word	0x080031b9
 8003098:	080031b9 	.word	0x080031b9
 800309c:	080031b9 	.word	0x080031b9
 80030a0:	08003137 	.word	0x08003137
 80030a4:	080031b9 	.word	0x080031b9
 80030a8:	080031b9 	.word	0x080031b9
 80030ac:	080031b9 	.word	0x080031b9
 80030b0:	08003177 	.word	0x08003177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f956 	bl	800336c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0208 	orr.w	r2, r2, #8
 80030ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6999      	ldr	r1, [r3, #24]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	619a      	str	r2, [r3, #24]
      break;
 80030f2:	e064      	b.n	80031be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f9a6 	bl	800344c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800311e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6999      	ldr	r1, [r3, #24]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	021a      	lsls	r2, r3, #8
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
      break;
 8003134:	e043      	b.n	80031be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f9fb 	bl	8003538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0208 	orr.w	r2, r2, #8
 8003150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0204 	bic.w	r2, r2, #4
 8003160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69d9      	ldr	r1, [r3, #28]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	61da      	str	r2, [r3, #28]
      break;
 8003174:	e023      	b.n	80031be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa4f 	bl	8003620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69d9      	ldr	r1, [r3, #28]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	021a      	lsls	r2, r3, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	61da      	str	r2, [r3, #28]
      break;
 80031b6:	e002      	b.n	80031be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a43      	ldr	r2, [pc, #268]	@ (8003340 <TIM_Base_SetConfig+0x120>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d00f      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a40      	ldr	r2, [pc, #256]	@ (8003344 <TIM_Base_SetConfig+0x124>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3f      	ldr	r2, [pc, #252]	@ (8003348 <TIM_Base_SetConfig+0x128>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3e      	ldr	r2, [pc, #248]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3d      	ldr	r2, [pc, #244]	@ (8003350 <TIM_Base_SetConfig+0x130>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a32      	ldr	r2, [pc, #200]	@ (8003340 <TIM_Base_SetConfig+0x120>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003280:	d027      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2f      	ldr	r2, [pc, #188]	@ (8003344 <TIM_Base_SetConfig+0x124>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d023      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2e      	ldr	r2, [pc, #184]	@ (8003348 <TIM_Base_SetConfig+0x128>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2d      	ldr	r2, [pc, #180]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2c      	ldr	r2, [pc, #176]	@ (8003350 <TIM_Base_SetConfig+0x130>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d017      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003354 <TIM_Base_SetConfig+0x134>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003358 <TIM_Base_SetConfig+0x138>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a29      	ldr	r2, [pc, #164]	@ (800335c <TIM_Base_SetConfig+0x13c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <TIM_Base_SetConfig+0x140>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <TIM_Base_SetConfig+0x144>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <TIM_Base_SetConfig+0x148>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0e      	ldr	r2, [pc, #56]	@ (8003340 <TIM_Base_SetConfig+0x120>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0xf2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a10      	ldr	r2, [pc, #64]	@ (8003350 <TIM_Base_SetConfig+0x130>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d103      	bne.n	800331a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40010000 	.word	0x40010000
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	40010400 	.word	0x40010400
 8003354:	40014000 	.word	0x40014000
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800
 8003360:	40001800 	.word	0x40001800
 8003364:	40001c00 	.word	0x40001c00
 8003368:	40002000 	.word	0x40002000

0800336c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f023 0201 	bic.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 0302 	bic.w	r3, r3, #2
 80033b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a20      	ldr	r2, [pc, #128]	@ (8003444 <TIM_OC1_SetConfig+0xd8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_OC1_SetConfig+0x64>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <TIM_OC1_SetConfig+0xdc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10c      	bne.n	80033ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0308 	bic.w	r3, r3, #8
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <TIM_OC1_SetConfig+0xd8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_OC1_SetConfig+0x8e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <TIM_OC1_SetConfig+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d111      	bne.n	800341e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	621a      	str	r2, [r3, #32]
}
 8003438:	bf00      	nop
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40010000 	.word	0x40010000
 8003448:	40010400 	.word	0x40010400

0800344c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f023 0210 	bic.w	r2, r3, #16
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0320 	bic.w	r3, r3, #32
 8003496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <TIM_OC2_SetConfig+0xe4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_OC2_SetConfig+0x68>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <TIM_OC2_SetConfig+0xe8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10d      	bne.n	80034d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <TIM_OC2_SetConfig+0xe4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_OC2_SetConfig+0x94>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a16      	ldr	r2, [pc, #88]	@ (8003534 <TIM_OC2_SetConfig+0xe8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d113      	bne.n	8003508 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40010400 	.word	0x40010400

08003538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a21      	ldr	r2, [pc, #132]	@ (8003618 <TIM_OC3_SetConfig+0xe0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_OC3_SetConfig+0x66>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a20      	ldr	r2, [pc, #128]	@ (800361c <TIM_OC3_SetConfig+0xe4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10d      	bne.n	80035ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <TIM_OC3_SetConfig+0xe0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_OC3_SetConfig+0x92>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a15      	ldr	r2, [pc, #84]	@ (800361c <TIM_OC3_SetConfig+0xe4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d113      	bne.n	80035f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	621a      	str	r2, [r3, #32]
}
 800360c:	bf00      	nop
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40010000 	.word	0x40010000
 800361c:	40010400 	.word	0x40010400

08003620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800364e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800366a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <TIM_OC4_SetConfig+0xa4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_OC4_SetConfig+0x68>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a11      	ldr	r2, [pc, #68]	@ (80036c8 <TIM_OC4_SetConfig+0xa8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d109      	bne.n	800369c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800368e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40010400 	.word	0x40010400

080036cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2201      	movs	r2, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e05a      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d022      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d01d      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d018      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1b      	ldr	r2, [pc, #108]	@ (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1a      	ldr	r2, [pc, #104]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a18      	ldr	r2, [pc, #96]	@ (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a17      	ldr	r2, [pc, #92]	@ (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a15      	ldr	r2, [pc, #84]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40010400 	.word	0x40010400
 8003808:	40014000 	.word	0x40014000
 800380c:	40001800 	.word	0x40001800

08003810 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <__NVIC_SetPriority>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	@ (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	@ (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <SysTick_Handler+0x1c>)
 8003892:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003894:	f001 fec6 	bl	8005624 <xTaskGetSchedulerState>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800389e:	f002 fcbb 	bl	8006218 <xPortSysTickHandler>
  }
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	e000e010 	.word	0xe000e010

080038ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038b0:	2100      	movs	r1, #0
 80038b2:	f06f 0004 	mvn.w	r0, #4
 80038b6:	f7ff ffbf 	bl	8003838 <__NVIC_SetPriority>
#endif
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c6:	f3ef 8305 	mrs	r3, IPSR
 80038ca:	603b      	str	r3, [r7, #0]
  return(result);
 80038cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80038d2:	f06f 0305 	mvn.w	r3, #5
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	e00c      	b.n	80038f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038da:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <osKernelInitialize+0x44>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038e2:	4b08      	ldr	r3, [pc, #32]	@ (8003904 <osKernelInitialize+0x44>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e002      	b.n	80038f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038f4:	687b      	ldr	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000180 	.word	0x20000180

08003908 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800390e:	f3ef 8305 	mrs	r3, IPSR
 8003912:	603b      	str	r3, [r7, #0]
  return(result);
 8003914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <osKernelStart+0x1a>
    stat = osErrorISR;
 800391a:	f06f 0305 	mvn.w	r3, #5
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	e010      	b.n	8003944 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003922:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <osKernelStart+0x48>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d109      	bne.n	800393e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800392a:	f7ff ffbf 	bl	80038ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800392e:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <osKernelStart+0x48>)
 8003930:	2202      	movs	r2, #2
 8003932:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003934:	f001 fa12 	bl	8004d5c <vTaskStartScheduler>
      stat = osOK;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	e002      	b.n	8003944 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000180 	.word	0x20000180

08003954 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	@ 0x38
 8003958:	af04      	add	r7, sp, #16
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003964:	f3ef 8305 	mrs	r3, IPSR
 8003968:	617b      	str	r3, [r7, #20]
  return(result);
 800396a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800396c:	2b00      	cmp	r3, #0
 800396e:	d17e      	bne.n	8003a6e <osThreadNew+0x11a>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d07b      	beq.n	8003a6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800397a:	2318      	movs	r3, #24
 800397c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d045      	beq.n	8003a1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <osThreadNew+0x48>
        name = attr->name;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <osThreadNew+0x6e>
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b38      	cmp	r3, #56	@ 0x38
 80039b4:	d805      	bhi.n	80039c2 <osThreadNew+0x6e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <osThreadNew+0x72>
        return (NULL);
 80039c2:	2300      	movs	r3, #0
 80039c4:	e054      	b.n	8003a70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <osThreadNew+0xa8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80039e4:	d90a      	bls.n	80039fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <osThreadNew+0xa8>
        mem = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e010      	b.n	8003a1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10c      	bne.n	8003a1e <osThreadNew+0xca>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d108      	bne.n	8003a1e <osThreadNew+0xca>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d104      	bne.n	8003a1e <osThreadNew+0xca>
          mem = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e001      	b.n	8003a1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d110      	bne.n	8003a46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a2c:	9202      	str	r2, [sp, #8]
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6a3a      	ldr	r2, [r7, #32]
 8003a38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 ff9a 	bl	8004974 <xTaskCreateStatic>
 8003a40:	4603      	mov	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e013      	b.n	8003a6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d110      	bne.n	8003a6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	f107 0310 	add.w	r3, r7, #16
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 ffe8 	bl	8004a34 <xTaskCreate>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <osThreadNew+0x11a>
            hTask = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a6e:	693b      	ldr	r3, [r7, #16]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3728      	adds	r7, #40	@ 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a80:	f3ef 8305 	mrs	r3, IPSR
 8003a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <osDelay+0x1c>
    stat = osErrorISR;
 8003a8c:	f06f 0305 	mvn.w	r3, #5
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e007      	b.n	8003aa4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 f926 	bl	8004cf0 <vTaskDelay>
    }
  }

  return (stat);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b08a      	sub	sp, #40	@ 0x28
 8003ab2:	af02      	add	r7, sp, #8
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003abe:	f3ef 8305 	mrs	r3, IPSR
 8003ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8003ac4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d175      	bne.n	8003bb6 <osSemaphoreNew+0x108>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d072      	beq.n	8003bb6 <osSemaphoreNew+0x108>
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d86e      	bhi.n	8003bb6 <osSemaphoreNew+0x108>
    mem = -1;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <osSemaphoreNew+0x4c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b4f      	cmp	r3, #79	@ 0x4f
 8003af2:	d902      	bls.n	8003afa <osSemaphoreNew+0x4c>
        mem = 1;
 8003af4:	2301      	movs	r3, #1
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	e00c      	b.n	8003b14 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <osSemaphoreNew+0x66>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <osSemaphoreNew+0x66>
          mem = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e001      	b.n	8003b14 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d04c      	beq.n	8003bb6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d128      	bne.n	8003b74 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10a      	bne.n	8003b3e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	9200      	str	r2, [sp, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	2001      	movs	r0, #1
 8003b36:	f000 f995 	bl	8003e64 <xQueueGenericCreateStatic>
 8003b3a:	61f8      	str	r0, [r7, #28]
 8003b3c:	e005      	b.n	8003b4a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003b3e:	2203      	movs	r2, #3
 8003b40:	2100      	movs	r1, #0
 8003b42:	2001      	movs	r0, #1
 8003b44:	f000 fa0b 	bl	8003f5e <xQueueGenericCreate>
 8003b48:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d022      	beq.n	8003b96 <osSemaphoreNew+0xe8>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01f      	beq.n	8003b96 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b56:	2300      	movs	r3, #0
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	69f8      	ldr	r0, [r7, #28]
 8003b5e:	f000 facb 	bl	80040f8 <xQueueGenericSend>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d016      	beq.n	8003b96 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003b68:	69f8      	ldr	r0, [r7, #28]
 8003b6a:	f000 fd47 	bl	80045fc <vQueueDelete>
            hSemaphore = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e010      	b.n	8003b96 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fa49 	bl	800401a <xQueueCreateCountingSemaphoreStatic>
 8003b88:	61f8      	str	r0, [r7, #28]
 8003b8a:	e004      	b.n	8003b96 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa7c 	bl	800408c <xQueueCreateCountingSemaphore>
 8003b94:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00c      	beq.n	8003bb6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <osSemaphoreNew+0xfc>
          name = attr->name;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e001      	b.n	8003bae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	69f8      	ldr	r0, [r7, #28]
 8003bb2:	f000 fe57 	bl	8004864 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003bb6:	69fb      	ldr	r3, [r7, #28]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a07      	ldr	r2, [pc, #28]	@ (8003bec <vApplicationGetIdleTaskMemory+0x2c>)
 8003bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a06      	ldr	r2, [pc, #24]	@ (8003bf0 <vApplicationGetIdleTaskMemory+0x30>)
 8003bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	@ 0x80
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000184 	.word	0x20000184
 8003bf0:	2000022c 	.word	0x2000022c

08003bf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a07      	ldr	r2, [pc, #28]	@ (8003c20 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a06      	ldr	r2, [pc, #24]	@ (8003c24 <vApplicationGetTimerTaskMemory+0x30>)
 8003c0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	2000042c 	.word	0x2000042c
 8003c24:	200004d4 	.word	0x200004d4

08003c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 0208 	add.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f103 0208 	add.w	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 0208 	add.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d103      	bne.n	8003cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e00c      	b.n	8003d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3308      	adds	r3, #8
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e002      	b.n	8003cf8 <vListInsert+0x2e>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d2f6      	bcs.n	8003cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6852      	ldr	r2, [r2, #4]
 8003d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d103      	bne.n	8003d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003dbc:	f002 f99c 	bl	80060f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dec:	3b01      	subs	r3, #1
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22ff      	movs	r2, #255	@ 0xff
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	22ff      	movs	r2, #255	@ 0xff
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d114      	bne.n	8003e3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01a      	beq.n	8003e50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 fa3a 	bl	8005298 <xTaskRemoveFromEventList>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d012      	beq.n	8003e50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <xQueueGenericReset+0xd0>)
 8003e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	e009      	b.n	8003e50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3310      	adds	r3, #16
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fef1 	bl	8003c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3324      	adds	r3, #36	@ 0x24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff feec 	bl	8003c28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e50:	f002 f984 	bl	800615c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e54:	2301      	movs	r3, #1
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	@ 0x38
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <xQueueGenericCreateStatic+0x56>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <xQueueGenericCreateStatic+0x5a>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xQueueGenericCreateStatic+0x5c>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	623b      	str	r3, [r7, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <xQueueGenericCreateStatic+0x84>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <xQueueGenericCreateStatic+0x88>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <xQueueGenericCreateStatic+0x8a>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	61fb      	str	r3, [r7, #28]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f0a:	2350      	movs	r3, #80	@ 0x50
 8003f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b50      	cmp	r3, #80	@ 0x50
 8003f12:	d00b      	beq.n	8003f2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	61bb      	str	r3, [r7, #24]
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f840 	bl	8003fd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3730      	adds	r7, #48	@ 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b08a      	sub	sp, #40	@ 0x28
 8003f62:	af02      	add	r7, sp, #8
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	613b      	str	r3, [r7, #16]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3350      	adds	r3, #80	@ 0x50
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f002 f9cf 	bl	800633c <pvPortMalloc>
 8003f9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d011      	beq.n	8003fca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3350      	adds	r3, #80	@ 0x50
 8003fae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fb8:	79fa      	ldrb	r2, [r7, #7]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f805 	bl	8003fd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fca:	69bb      	ldr	r3, [r7, #24]
	}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d103      	bne.n	8003ff0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e002      	b.n	8003ff6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004002:	2101      	movs	r1, #1
 8004004:	69b8      	ldr	r0, [r7, #24]
 8004006:	f7ff fec3 	bl	8003d90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800401a:	b580      	push	{r7, lr}
 800401c:	b08a      	sub	sp, #40	@ 0x28
 800401e:	af02      	add	r7, sp, #8
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	61bb      	str	r3, [r7, #24]
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	429a      	cmp	r2, r3
 800404a:	d90b      	bls.n	8004064 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	617b      	str	r3, [r7, #20]
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004064:	2302      	movs	r3, #2
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fef8 	bl	8003e64 <xQueueGenericCreateStatic>
 8004074:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004082:	69fb      	ldr	r3, [r7, #28]
	}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	613b      	str	r3, [r7, #16]
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d90b      	bls.n	80040d4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
}
 80040ce:	bf00      	nop
 80040d0:	bf00      	nop
 80040d2:	e7fd      	b.n	80040d0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80040d4:	2202      	movs	r2, #2
 80040d6:	2100      	movs	r1, #0
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff40 	bl	8003f5e <xQueueGenericCreate>
 80040de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80040ec:	697b      	ldr	r3, [r7, #20]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	@ 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004106:	2300      	movs	r3, #0
 8004108:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <xQueueGenericSend+0x34>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <xQueueGenericSend+0x42>
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <xQueueGenericSend+0x46>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueGenericSend+0x48>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <xQueueGenericSend+0x64>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d103      	bne.n	800416a <xQueueGenericSend+0x72>
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <xQueueGenericSend+0x76>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueGenericSend+0x78>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <xQueueGenericSend+0x94>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800418c:	f001 fa4a 	bl	8005624 <xTaskGetSchedulerState>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <xQueueGenericSend+0xa4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <xQueueGenericSend+0xa8>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <xQueueGenericSend+0xaa>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <xQueueGenericSend+0xc6>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	61fb      	str	r3, [r7, #28]
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041be:	f001 ff9b 	bl	80060f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <xQueueGenericSend+0xdc>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d129      	bne.n	8004228 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041da:	f000 fa33 	bl	8004644 <prvCopyDataToQueue>
 80041de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	3324      	adds	r3, #36	@ 0x24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 f853 	bl	8005298 <xTaskRemoveFromEventList>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041f8:	4b3f      	ldr	r3, [pc, #252]	@ (80042f8 <xQueueGenericSend+0x200>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	e00a      	b.n	8004220 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800420a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004210:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <xQueueGenericSend+0x200>)
 8004212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004220:	f001 ff9c 	bl	800615c <vPortExitCritical>
				return pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	e063      	b.n	80042f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800422e:	f001 ff95 	bl	800615c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004232:	2300      	movs	r3, #0
 8004234:	e05c      	b.n	80042f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4618      	mov	r0, r3
 8004242:	f001 f88d 	bl	8005360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800424a:	f001 ff87 	bl	800615c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800424e:	f000 fdf5 	bl	8004e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004252:	f001 ff51 	bl	80060f8 <vPortEnterCritical>
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800425c:	b25b      	sxtb	r3, r3
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d103      	bne.n	800426c <xQueueGenericSend+0x174>
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004272:	b25b      	sxtb	r3, r3
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d103      	bne.n	8004282 <xQueueGenericSend+0x18a>
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004282:	f001 ff6b 	bl	800615c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004286:	1d3a      	adds	r2, r7, #4
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f87c 	bl	800538c <xTaskCheckForTimeOut>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d124      	bne.n	80042e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800429a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800429c:	f000 faca 	bl	8004834 <prvIsQueueFull>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d018      	beq.n	80042d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	3310      	adds	r3, #16
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 ffa0 	bl	80051f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042b6:	f000 fa55 	bl	8004764 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ba:	f000 fdcd 	bl	8004e58 <xTaskResumeAll>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f af7c 	bne.w	80041be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <xQueueGenericSend+0x200>)
 80042c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	e772      	b.n	80041be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042da:	f000 fa43 	bl	8004764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042de:	f000 fdbb 	bl	8004e58 <xTaskResumeAll>
 80042e2:	e76c      	b.n	80041be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042e6:	f000 fa3d 	bl	8004764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042ea:	f000 fdb5 	bl	8004e58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3738      	adds	r7, #56	@ 0x38
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b090      	sub	sp, #64	@ 0x40
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <xQueueGenericSendFromISR+0x3e>
 8004332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <xQueueGenericSendFromISR+0x42>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <xQueueGenericSendFromISR+0x44>
 800433e:	2300      	movs	r3, #0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d103      	bne.n	800436a <xQueueGenericSendFromISR+0x6e>
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <xQueueGenericSendFromISR+0x72>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <xQueueGenericSendFromISR+0x74>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	623b      	str	r3, [r7, #32]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800438c:	f001 ff94 	bl	80062b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004390:	f3ef 8211 	mrs	r2, BASEPRI
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	61fa      	str	r2, [r7, #28]
 80043a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <xQueueGenericSendFromISR+0xc2>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d12f      	bne.n	800441e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043d4:	f000 f936 	bl	8004644 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d112      	bne.n	8004408 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ec:	3324      	adds	r3, #36	@ 0x24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 ff52 	bl	8005298 <xTaskRemoveFromEventList>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00e      	beq.n	8004418 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e007      	b.n	8004418 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800440c:	3301      	adds	r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	b25a      	sxtb	r2, r3
 8004412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004418:	2301      	movs	r3, #1
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800441c:	e001      	b.n	8004422 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800441e:	2300      	movs	r3, #0
 8004420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004424:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800442c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800442e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004430:	4618      	mov	r0, r3
 8004432:	3740      	adds	r7, #64	@ 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	@ 0x30
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <xQueueReceive+0x32>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	623b      	str	r3, [r7, #32]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <xQueueReceive+0x40>
 8004470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <xQueueReceive+0x44>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <xQueueReceive+0x46>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <xQueueReceive+0x62>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	61fb      	str	r3, [r7, #28]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800449a:	f001 f8c3 	bl	8005624 <xTaskGetSchedulerState>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <xQueueReceive+0x72>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueReceive+0x76>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueReceive+0x78>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <xQueueReceive+0x94>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	61bb      	str	r3, [r7, #24]
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044cc:	f001 fe14 	bl	80060f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01f      	beq.n	800451c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044e0:	f000 f91a 	bl	8004718 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	1e5a      	subs	r2, r3, #1
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00f      	beq.n	8004514 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	3310      	adds	r3, #16
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fecd 	bl	8005298 <xTaskRemoveFromEventList>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004504:	4b3c      	ldr	r3, [pc, #240]	@ (80045f8 <xQueueReceive+0x1c0>)
 8004506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004514:	f001 fe22 	bl	800615c <vPortExitCritical>
				return pdPASS;
 8004518:	2301      	movs	r3, #1
 800451a:	e069      	b.n	80045f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004522:	f001 fe1b 	bl	800615c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004526:	2300      	movs	r3, #0
 8004528:	e062      	b.n	80045f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004530:	f107 0310 	add.w	r3, r7, #16
 8004534:	4618      	mov	r0, r3
 8004536:	f000 ff13 	bl	8005360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800453a:	2301      	movs	r3, #1
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800453e:	f001 fe0d 	bl	800615c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004542:	f000 fc7b 	bl	8004e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004546:	f001 fdd7 	bl	80060f8 <vPortEnterCritical>
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004550:	b25b      	sxtb	r3, r3
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d103      	bne.n	8004560 <xQueueReceive+0x128>
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004566:	b25b      	sxtb	r3, r3
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d103      	bne.n	8004576 <xQueueReceive+0x13e>
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004576:	f001 fdf1 	bl	800615c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800457a:	1d3a      	adds	r2, r7, #4
 800457c:	f107 0310 	add.w	r3, r7, #16
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 ff02 	bl	800538c <xTaskCheckForTimeOut>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d123      	bne.n	80045d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800458e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004590:	f000 f93a 	bl	8004808 <prvIsQueueEmpty>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d017      	beq.n	80045ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	3324      	adds	r3, #36	@ 0x24
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fe26 	bl	80051f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045aa:	f000 f8db 	bl	8004764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ae:	f000 fc53 	bl	8004e58 <xTaskResumeAll>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d189      	bne.n	80044cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80045b8:	4b0f      	ldr	r3, [pc, #60]	@ (80045f8 <xQueueReceive+0x1c0>)
 80045ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	e780      	b.n	80044cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045cc:	f000 f8ca 	bl	8004764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045d0:	f000 fc42 	bl	8004e58 <xTaskResumeAll>
 80045d4:	e77a      	b.n	80044cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045d8:	f000 f8c4 	bl	8004764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045dc:	f000 fc3c 	bl	8004e58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045e2:	f000 f911 	bl	8004808 <prvIsQueueEmpty>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f43f af6f 	beq.w	80044cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3730      	adds	r7, #48	@ 0x30
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <vQueueDelete+0x2a>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60bb      	str	r3, [r7, #8]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f946 	bl	80048b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f001 ff4e 	bl	80064d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004658:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10d      	bne.n	800467e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d14d      	bne.n	8004706 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fff6 	bl	8005660 <xTaskPriorityDisinherit>
 8004674:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	e043      	b.n	8004706 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d119      	bne.n	80046b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6858      	ldr	r0, [r3, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	461a      	mov	r2, r3
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	f002 f8ce 	bl	8006830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	441a      	add	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d32b      	bcc.n	8004706 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	e026      	b.n	8004706 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68d8      	ldr	r0, [r3, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	461a      	mov	r2, r3
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	f002 f8b4 	bl	8006830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	425b      	negs	r3, r3
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d207      	bcs.n	80046f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	425b      	negs	r3, r3
 80046ee:	441a      	add	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d105      	bne.n	8004706 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	3b01      	subs	r3, #1
 8004704:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800470e:	697b      	ldr	r3, [r7, #20]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d018      	beq.n	800475c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	441a      	add	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d303      	bcc.n	800474c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68d9      	ldr	r1, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	461a      	mov	r2, r3
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	f002 f86a 	bl	8006830 <memcpy>
	}
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800476c:	f001 fcc4 	bl	80060f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004776:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004778:	e011      	b.n	800479e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3324      	adds	r3, #36	@ 0x24
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fd86 	bl	8005298 <xTaskRemoveFromEventList>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004792:	f000 fe5f 	bl	8005454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	3b01      	subs	r3, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800479e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	dce9      	bgt.n	800477a <prvUnlockQueue+0x16>
 80047a6:	e000      	b.n	80047aa <prvUnlockQueue+0x46>
					break;
 80047a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	22ff      	movs	r2, #255	@ 0xff
 80047ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047b2:	f001 fcd3 	bl	800615c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047b6:	f001 fc9f 	bl	80060f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047c2:	e011      	b.n	80047e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d012      	beq.n	80047f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3310      	adds	r3, #16
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fd61 	bl	8005298 <xTaskRemoveFromEventList>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047dc:	f000 fe3a 	bl	8005454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047e0:	7bbb      	ldrb	r3, [r7, #14]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	dce9      	bgt.n	80047c4 <prvUnlockQueue+0x60>
 80047f0:	e000      	b.n	80047f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	22ff      	movs	r2, #255	@ 0xff
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80047fc:	f001 fcae 	bl	800615c <vPortExitCritical>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004810:	f001 fc72 	bl	80060f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e001      	b.n	8004826 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004826:	f001 fc99 	bl	800615c <vPortExitCritical>

	return xReturn;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800483c:	f001 fc5c 	bl	80060f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004848:	429a      	cmp	r2, r3
 800484a:	d102      	bne.n	8004852 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e001      	b.n	8004856 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004856:	f001 fc81 	bl	800615c <vPortExitCritical>

	return xReturn;
 800485a:	68fb      	ldr	r3, [r7, #12]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e014      	b.n	800489e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004874:	4a0f      	ldr	r2, [pc, #60]	@ (80048b4 <vQueueAddToRegistry+0x50>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004880:	490c      	ldr	r1, [pc, #48]	@ (80048b4 <vQueueAddToRegistry+0x50>)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800488a:	4a0a      	ldr	r2, [pc, #40]	@ (80048b4 <vQueueAddToRegistry+0x50>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004896:	e006      	b.n	80048a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b07      	cmp	r3, #7
 80048a2:	d9e7      	bls.n	8004874 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	200008d4 	.word	0x200008d4

080048b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e016      	b.n	80048f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80048c6:	4a10      	ldr	r2, [pc, #64]	@ (8004908 <vQueueUnregisterQueue+0x50>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d10b      	bne.n	80048ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80048d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004908 <vQueueUnregisterQueue+0x50>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2100      	movs	r1, #0
 80048dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80048e0:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <vQueueUnregisterQueue+0x50>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
				break;
 80048ec:	e006      	b.n	80048fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b07      	cmp	r3, #7
 80048f8:	d9e5      	bls.n	80048c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	200008d4 	.word	0x200008d4

0800490c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800491c:	f001 fbec 	bl	80060f8 <vPortEnterCritical>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004926:	b25b      	sxtb	r3, r3
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d103      	bne.n	8004936 <vQueueWaitForMessageRestricted+0x2a>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800493c:	b25b      	sxtb	r3, r3
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d103      	bne.n	800494c <vQueueWaitForMessageRestricted+0x40>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494c:	f001 fc06 	bl	800615c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	3324      	adds	r3, #36	@ 0x24
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fc6d 	bl	8005240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004966:	6978      	ldr	r0, [r7, #20]
 8004968:	f7ff fefc 	bl	8004764 <prvUnlockQueue>
	}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08e      	sub	sp, #56	@ 0x38
 8004978:	af04      	add	r7, sp, #16
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	623b      	str	r3, [r7, #32]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <xTaskCreateStatic+0x4a>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	61fb      	str	r3, [r7, #28]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049be:	23a8      	movs	r3, #168	@ 0xa8
 80049c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2ba8      	cmp	r3, #168	@ 0xa8
 80049c6:	d00b      	beq.n	80049e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	61bb      	str	r3, [r7, #24]
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01e      	beq.n	8004a26 <xTaskCreateStatic+0xb2>
 80049e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01b      	beq.n	8004a26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a00:	2300      	movs	r3, #0
 8004a02:	9303      	str	r3, [sp, #12]
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f851 	bl	8004ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a20:	f000 f8f6 	bl	8004c10 <prvAddNewTaskToReadyList>
 8004a24:	e001      	b.n	8004a2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a2a:	697b      	ldr	r3, [r7, #20]
	}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	@ 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	@ 0x30
 8004a38:	af04      	add	r7, sp, #16
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fc77 	bl	800633c <pvPortMalloc>
 8004a4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a56:	20a8      	movs	r0, #168	@ 0xa8
 8004a58:	f001 fc70 	bl	800633c <pvPortMalloc>
 8004a5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a6a:	e005      	b.n	8004a78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a6c:	6978      	ldr	r0, [r7, #20]
 8004a6e:	f001 fd33 	bl	80064d8 <vPortFree>
 8004a72:	e001      	b.n	8004a78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d017      	beq.n	8004aae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9303      	str	r3, [sp, #12]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f80f 	bl	8004ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aa2:	69f8      	ldr	r0, [r7, #28]
 8004aa4:	f000 f8b4 	bl	8004c10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	e002      	b.n	8004ab4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
	}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	21a5      	movs	r1, #165	@ 0xa5
 8004ada:	f001 fe1d 	bl	8006718 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f023 0307 	bic.w	r3, r3, #7
 8004af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	617b      	str	r3, [r7, #20]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01f      	beq.n	8004b60 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	e012      	b.n	8004b4c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	3334      	adds	r3, #52	@ 0x34
 8004b36:	460a      	mov	r2, r1
 8004b38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d006      	beq.n	8004b54 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	d9e9      	bls.n	8004b26 <prvInitialiseNewTask+0x66>
 8004b52:	e000      	b.n	8004b56 <prvInitialiseNewTask+0x96>
			{
				break;
 8004b54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b5e:	e003      	b.n	8004b68 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	2b37      	cmp	r3, #55	@ 0x37
 8004b6c:	d901      	bls.n	8004b72 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b6e:	2337      	movs	r3, #55	@ 0x37
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2200      	movs	r2, #0
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	3304      	adds	r3, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff f86d 	bl	8003c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	3318      	adds	r3, #24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff f868 	bl	8003c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	3354      	adds	r3, #84	@ 0x54
 8004bc2:	224c      	movs	r2, #76	@ 0x4c
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 fda6 	bl	8006718 <memset>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <prvInitialiseNewTask+0x144>)
 8004bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004c08 <prvInitialiseNewTask+0x148>)
 8004bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <prvInitialiseNewTask+0x14c>)
 8004bdc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	69b8      	ldr	r0, [r7, #24]
 8004be4:	f001 f95a 	bl	8005e9c <pxPortInitialiseStack>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20004b68 	.word	0x20004b68
 8004c08:	20004bd0 	.word	0x20004bd0
 8004c0c:	20004c38 	.word	0x20004c38

08004c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c18:	f001 fa6e 	bl	80060f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c26:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c34:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d110      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c3c:	f000 fc2e 	bl	800549c <prvInitialiseTaskLists>
 8004c40:	e00d      	b.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c42:	4b26      	ldr	r3, [pc, #152]	@ (8004cdc <prvAddNewTaskToReadyList+0xcc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c4a:	4b23      	ldr	r3, [pc, #140]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d802      	bhi.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c58:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce4 <prvAddNewTaskToReadyList+0xd4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <prvAddNewTaskToReadyList+0x74>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <prvAddNewTaskToReadyList+0xd4>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <prvAddNewTaskToReadyList+0xd8>)
 8004c92:	441a      	add	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fe fff1 	bl	8003c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ca0:	f001 fa5c 	bl	800615c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <prvAddNewTaskToReadyList+0xcc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d207      	bcs.n	8004cca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <prvAddNewTaskToReadyList+0xdc>)
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000de8 	.word	0x20000de8
 8004cd8:	20000914 	.word	0x20000914
 8004cdc:	20000df4 	.word	0x20000df4
 8004ce0:	20000e04 	.word	0x20000e04
 8004ce4:	20000df0 	.word	0x20000df0
 8004ce8:	20000918 	.word	0x20000918
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d02:	4b14      	ldr	r3, [pc, #80]	@ (8004d54 <vTaskDelay+0x64>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <vTaskDelay+0x32>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60bb      	str	r3, [r7, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	e7fd      	b.n	8004d1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d22:	f000 f88b 	bl	8004e3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d26:	2100      	movs	r1, #0
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fd09 	bl	8005740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d2e:	f000 f893 	bl	8004e58 <xTaskResumeAll>
 8004d32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d3a:	4b07      	ldr	r3, [pc, #28]	@ (8004d58 <vTaskDelay+0x68>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000e10 	.word	0x20000e10
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	@ 0x28
 8004d60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d6a:	463a      	mov	r2, r7
 8004d6c:	1d39      	adds	r1, r7, #4
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe ff24 	bl	8003bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	9202      	str	r2, [sp, #8]
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	2300      	movs	r3, #0
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	2300      	movs	r3, #0
 8004d88:	460a      	mov	r2, r1
 8004d8a:	4924      	ldr	r1, [pc, #144]	@ (8004e1c <vTaskStartScheduler+0xc0>)
 8004d8c:	4824      	ldr	r0, [pc, #144]	@ (8004e20 <vTaskStartScheduler+0xc4>)
 8004d8e:	f7ff fdf1 	bl	8004974 <xTaskCreateStatic>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a23      	ldr	r2, [pc, #140]	@ (8004e24 <vTaskStartScheduler+0xc8>)
 8004d96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d98:	4b22      	ldr	r3, [pc, #136]	@ (8004e24 <vTaskStartScheduler+0xc8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e001      	b.n	8004daa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d102      	bne.n	8004db6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004db0:	f000 fd1a 	bl	80057e8 <xTimerCreateTimerTask>
 8004db4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d11b      	bne.n	8004df4 <vTaskStartScheduler+0x98>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	613b      	str	r3, [r7, #16]
}
 8004dce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dd0:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <vTaskStartScheduler+0xcc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3354      	adds	r3, #84	@ 0x54
 8004dd6:	4a15      	ldr	r2, [pc, #84]	@ (8004e2c <vTaskStartScheduler+0xd0>)
 8004dd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dda:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <vTaskStartScheduler+0xd4>)
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004de2:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <vTaskStartScheduler+0xd8>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004de8:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <vTaskStartScheduler+0xdc>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dee:	f001 f8df 	bl	8005fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004df2:	e00f      	b.n	8004e14 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d10b      	bne.n	8004e14 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	60fb      	str	r3, [r7, #12]
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <vTaskStartScheduler+0xb4>
}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	08006978 	.word	0x08006978
 8004e20:	0800546d 	.word	0x0800546d
 8004e24:	20000e0c 	.word	0x20000e0c
 8004e28:	20000914 	.word	0x20000914
 8004e2c:	20000010 	.word	0x20000010
 8004e30:	20000e08 	.word	0x20000e08
 8004e34:	20000df4 	.word	0x20000df4
 8004e38:	20000dec 	.word	0x20000dec

08004e3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e40:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <vTaskSuspendAll+0x18>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a03      	ldr	r2, [pc, #12]	@ (8004e54 <vTaskSuspendAll+0x18>)
 8004e48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	20000e10 	.word	0x20000e10

08004e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e66:	4b42      	ldr	r3, [pc, #264]	@ (8004f70 <xTaskResumeAll+0x118>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <xTaskResumeAll+0x2e>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	603b      	str	r3, [r7, #0]
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	e7fd      	b.n	8004e82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e86:	f001 f937 	bl	80060f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e8a:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <xTaskResumeAll+0x118>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	4a37      	ldr	r2, [pc, #220]	@ (8004f70 <xTaskResumeAll+0x118>)
 8004e92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e94:	4b36      	ldr	r3, [pc, #216]	@ (8004f70 <xTaskResumeAll+0x118>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d162      	bne.n	8004f62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e9c:	4b35      	ldr	r3, [pc, #212]	@ (8004f74 <xTaskResumeAll+0x11c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d05e      	beq.n	8004f62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea4:	e02f      	b.n	8004f06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea6:	4b34      	ldr	r3, [pc, #208]	@ (8004f78 <xTaskResumeAll+0x120>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe ff42 	bl	8003d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe ff3d 	bl	8003d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8004f7c <xTaskResumeAll+0x124>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d903      	bls.n	8004ed6 <xTaskResumeAll+0x7e>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f7c <xTaskResumeAll+0x124>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a27      	ldr	r2, [pc, #156]	@ (8004f80 <xTaskResumeAll+0x128>)
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe fec8 	bl	8003c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	4b23      	ldr	r3, [pc, #140]	@ (8004f84 <xTaskResumeAll+0x12c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d302      	bcc.n	8004f06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f00:	4b21      	ldr	r3, [pc, #132]	@ (8004f88 <xTaskResumeAll+0x130>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f06:	4b1c      	ldr	r3, [pc, #112]	@ (8004f78 <xTaskResumeAll+0x120>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1cb      	bne.n	8004ea6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f14:	f000 fb66 	bl	80055e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f18:	4b1c      	ldr	r3, [pc, #112]	@ (8004f8c <xTaskResumeAll+0x134>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f24:	f000 f846 	bl	8004fb4 <xTaskIncrementTick>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f2e:	4b16      	ldr	r3, [pc, #88]	@ (8004f88 <xTaskResumeAll+0x130>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f1      	bne.n	8004f24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004f40:	4b12      	ldr	r3, [pc, #72]	@ (8004f8c <xTaskResumeAll+0x134>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f46:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <xTaskResumeAll+0x130>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f52:	4b0f      	ldr	r3, [pc, #60]	@ (8004f90 <xTaskResumeAll+0x138>)
 8004f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f62:	f001 f8fb 	bl	800615c <vPortExitCritical>

	return xAlreadyYielded;
 8004f66:	68bb      	ldr	r3, [r7, #8]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000e10 	.word	0x20000e10
 8004f74:	20000de8 	.word	0x20000de8
 8004f78:	20000da8 	.word	0x20000da8
 8004f7c:	20000df0 	.word	0x20000df0
 8004f80:	20000918 	.word	0x20000918
 8004f84:	20000914 	.word	0x20000914
 8004f88:	20000dfc 	.word	0x20000dfc
 8004f8c:	20000df8 	.word	0x20000df8
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f9a:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <xTaskGetTickCount+0x1c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fa0:	687b      	ldr	r3, [r7, #4]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000dec 	.word	0x20000dec

08004fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80050fc <xTaskIncrementTick+0x148>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 8090 	bne.w	80050e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005100 <xTaskIncrementTick+0x14c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8005100 <xTaskIncrementTick+0x14c>)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d121      	bne.n	8005020 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fdc:	4b49      	ldr	r3, [pc, #292]	@ (8005104 <xTaskIncrementTick+0x150>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <xTaskIncrementTick+0x4a>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <xTaskIncrementTick+0x46>
 8004ffe:	4b41      	ldr	r3, [pc, #260]	@ (8005104 <xTaskIncrementTick+0x150>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	4b40      	ldr	r3, [pc, #256]	@ (8005108 <xTaskIncrementTick+0x154>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a3e      	ldr	r2, [pc, #248]	@ (8005104 <xTaskIncrementTick+0x150>)
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4a3e      	ldr	r2, [pc, #248]	@ (8005108 <xTaskIncrementTick+0x154>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b3e      	ldr	r3, [pc, #248]	@ (800510c <xTaskIncrementTick+0x158>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4a3c      	ldr	r2, [pc, #240]	@ (800510c <xTaskIncrementTick+0x158>)
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	f000 fae2 	bl	80055e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005020:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <xTaskIncrementTick+0x15c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d349      	bcc.n	80050be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800502a:	4b36      	ldr	r3, [pc, #216]	@ (8005104 <xTaskIncrementTick+0x150>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005034:	4b36      	ldr	r3, [pc, #216]	@ (8005110 <xTaskIncrementTick+0x15c>)
 8005036:	f04f 32ff 	mov.w	r2, #4294967295
 800503a:	601a      	str	r2, [r3, #0]
					break;
 800503c:	e03f      	b.n	80050be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503e:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <xTaskIncrementTick+0x150>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d203      	bcs.n	800505e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005056:	4a2e      	ldr	r2, [pc, #184]	@ (8005110 <xTaskIncrementTick+0x15c>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800505c:	e02f      	b.n	80050be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fe6a 	bl	8003d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	3318      	adds	r3, #24
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe fe61 	bl	8003d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507e:	4b25      	ldr	r3, [pc, #148]	@ (8005114 <xTaskIncrementTick+0x160>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d903      	bls.n	800508e <xTaskIncrementTick+0xda>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	4a22      	ldr	r2, [pc, #136]	@ (8005114 <xTaskIncrementTick+0x160>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4a1f      	ldr	r2, [pc, #124]	@ (8005118 <xTaskIncrementTick+0x164>)
 800509c:	441a      	add	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fe fdec 	bl	8003c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <xTaskIncrementTick+0x168>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d3b8      	bcc.n	800502a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050bc:	e7b5      	b.n	800502a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050be:	4b17      	ldr	r3, [pc, #92]	@ (800511c <xTaskIncrementTick+0x168>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c4:	4914      	ldr	r1, [pc, #80]	@ (8005118 <xTaskIncrementTick+0x164>)
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d901      	bls.n	80050da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80050d6:	2301      	movs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050da:	4b11      	ldr	r3, [pc, #68]	@ (8005120 <xTaskIncrementTick+0x16c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e004      	b.n	80050f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005124 <xTaskIncrementTick+0x170>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005124 <xTaskIncrementTick+0x170>)
 80050f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000e10 	.word	0x20000e10
 8005100:	20000dec 	.word	0x20000dec
 8005104:	20000da0 	.word	0x20000da0
 8005108:	20000da4 	.word	0x20000da4
 800510c:	20000e00 	.word	0x20000e00
 8005110:	20000e08 	.word	0x20000e08
 8005114:	20000df0 	.word	0x20000df0
 8005118:	20000918 	.word	0x20000918
 800511c:	20000914 	.word	0x20000914
 8005120:	20000dfc 	.word	0x20000dfc
 8005124:	20000df8 	.word	0x20000df8

08005128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800512e:	4b2b      	ldr	r3, [pc, #172]	@ (80051dc <vTaskSwitchContext+0xb4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005136:	4b2a      	ldr	r3, [pc, #168]	@ (80051e0 <vTaskSwitchContext+0xb8>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800513c:	e047      	b.n	80051ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800513e:	4b28      	ldr	r3, [pc, #160]	@ (80051e0 <vTaskSwitchContext+0xb8>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005144:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <vTaskSwitchContext+0xbc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e011      	b.n	8005170 <vTaskSwitchContext+0x48>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <vTaskSwitchContext+0x42>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <vTaskSwitchContext+0x3e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3b01      	subs	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	491d      	ldr	r1, [pc, #116]	@ (80051e8 <vTaskSwitchContext+0xc0>)
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0e3      	beq.n	800514c <vTaskSwitchContext+0x24>
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4a16      	ldr	r2, [pc, #88]	@ (80051e8 <vTaskSwitchContext+0xc0>)
 8005190:	4413      	add	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	3308      	adds	r3, #8
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d104      	bne.n	80051b4 <vTaskSwitchContext+0x8c>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4a0c      	ldr	r2, [pc, #48]	@ (80051ec <vTaskSwitchContext+0xc4>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4a09      	ldr	r2, [pc, #36]	@ (80051e4 <vTaskSwitchContext+0xbc>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <vTaskSwitchContext+0xc4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3354      	adds	r3, #84	@ 0x54
 80051ca:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <vTaskSwitchContext+0xc8>)
 80051cc:	6013      	str	r3, [r2, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000e10 	.word	0x20000e10
 80051e0:	20000dfc 	.word	0x20000dfc
 80051e4:	20000df0 	.word	0x20000df0
 80051e8:	20000918 	.word	0x20000918
 80051ec:	20000914 	.word	0x20000914
 80051f0:	20000010 	.word	0x20000010

080051f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800521c:	4b07      	ldr	r3, [pc, #28]	@ (800523c <vTaskPlaceOnEventList+0x48>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3318      	adds	r3, #24
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fe fd50 	bl	8003cca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800522a:	2101      	movs	r1, #1
 800522c:	6838      	ldr	r0, [r7, #0]
 800522e:	f000 fa87 	bl	8005740 <prvAddCurrentTaskToDelayedList>
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000914 	.word	0x20000914

08005240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	617b      	str	r3, [r7, #20]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800526a:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <vTaskPlaceOnEventListRestricted+0x54>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3318      	adds	r3, #24
 8005270:	4619      	mov	r1, r3
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fe fd05 	bl	8003c82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	68b8      	ldr	r0, [r7, #8]
 8005288:	f000 fa5a 	bl	8005740 <prvAddCurrentTaskToDelayedList>
	}
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000914 	.word	0x20000914

08005298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	60fb      	str	r3, [r7, #12]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3318      	adds	r3, #24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe fd36 	bl	8003d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <xTaskRemoveFromEventList+0xb0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11d      	bne.n	8005314 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3304      	adds	r3, #4
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe fd2d 	bl	8003d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <xTaskRemoveFromEventList+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d903      	bls.n	80052f6 <xTaskRemoveFromEventList+0x5e>
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a16      	ldr	r2, [pc, #88]	@ (800534c <xTaskRemoveFromEventList+0xb4>)
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4a13      	ldr	r2, [pc, #76]	@ (8005350 <xTaskRemoveFromEventList+0xb8>)
 8005304:	441a      	add	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	3304      	adds	r3, #4
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fe fcb8 	bl	8003c82 <vListInsertEnd>
 8005312:	e005      	b.n	8005320 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	3318      	adds	r3, #24
 8005318:	4619      	mov	r1, r3
 800531a:	480e      	ldr	r0, [pc, #56]	@ (8005354 <xTaskRemoveFromEventList+0xbc>)
 800531c:	f7fe fcb1 	bl	8003c82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <xTaskRemoveFromEventList+0xc0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	429a      	cmp	r2, r3
 800532c:	d905      	bls.n	800533a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800532e:	2301      	movs	r3, #1
 8005330:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <xTaskRemoveFromEventList+0xc4>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e001      	b.n	800533e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800533e:	697b      	ldr	r3, [r7, #20]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000e10 	.word	0x20000e10
 800534c:	20000df0 	.word	0x20000df0
 8005350:	20000918 	.word	0x20000918
 8005354:	20000da8 	.word	0x20000da8
 8005358:	20000914 	.word	0x20000914
 800535c:	20000dfc 	.word	0x20000dfc

08005360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <vTaskInternalSetTimeOutState+0x24>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005370:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <vTaskInternalSetTimeOutState+0x28>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000e00 	.word	0x20000e00
 8005388:	20000dec 	.word	0x20000dec

0800538c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	613b      	str	r3, [r7, #16]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60fb      	str	r3, [r7, #12]
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	e7fd      	b.n	80053ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053d2:	f000 fe91 	bl	80060f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053d6:	4b1d      	ldr	r3, [pc, #116]	@ (800544c <xTaskCheckForTimeOut+0xc0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d102      	bne.n	80053f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e023      	b.n	800543e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <xTaskCheckForTimeOut+0xc4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d007      	beq.n	8005412 <xTaskCheckForTimeOut+0x86>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e015      	b.n	800543e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	429a      	cmp	r2, r3
 800541a:	d20b      	bcs.n	8005434 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ff99 	bl	8005360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e004      	b.n	800543e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800543e:	f000 fe8d 	bl	800615c <vPortExitCritical>

	return xReturn;
 8005442:	69fb      	ldr	r3, [r7, #28]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20000dec 	.word	0x20000dec
 8005450:	20000e00 	.word	0x20000e00

08005454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <vTaskMissedYield+0x14>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	20000dfc 	.word	0x20000dfc

0800546c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005474:	f000 f852 	bl	800551c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005478:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <prvIdleTask+0x28>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d9f9      	bls.n	8005474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005480:	4b05      	ldr	r3, [pc, #20]	@ (8005498 <prvIdleTask+0x2c>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005490:	e7f0      	b.n	8005474 <prvIdleTask+0x8>
 8005492:	bf00      	nop
 8005494:	20000918 	.word	0x20000918
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	e00c      	b.n	80054c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <prvInitialiseTaskLists+0x60>)
 80054b4:	4413      	add	r3, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fbb6 	bl	8003c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3301      	adds	r3, #1
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b37      	cmp	r3, #55	@ 0x37
 80054c6:	d9ef      	bls.n	80054a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054c8:	480d      	ldr	r0, [pc, #52]	@ (8005500 <prvInitialiseTaskLists+0x64>)
 80054ca:	f7fe fbad 	bl	8003c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054ce:	480d      	ldr	r0, [pc, #52]	@ (8005504 <prvInitialiseTaskLists+0x68>)
 80054d0:	f7fe fbaa 	bl	8003c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054d4:	480c      	ldr	r0, [pc, #48]	@ (8005508 <prvInitialiseTaskLists+0x6c>)
 80054d6:	f7fe fba7 	bl	8003c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054da:	480c      	ldr	r0, [pc, #48]	@ (800550c <prvInitialiseTaskLists+0x70>)
 80054dc:	f7fe fba4 	bl	8003c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054e0:	480b      	ldr	r0, [pc, #44]	@ (8005510 <prvInitialiseTaskLists+0x74>)
 80054e2:	f7fe fba1 	bl	8003c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <prvInitialiseTaskLists+0x78>)
 80054e8:	4a05      	ldr	r2, [pc, #20]	@ (8005500 <prvInitialiseTaskLists+0x64>)
 80054ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <prvInitialiseTaskLists+0x7c>)
 80054ee:	4a05      	ldr	r2, [pc, #20]	@ (8005504 <prvInitialiseTaskLists+0x68>)
 80054f0:	601a      	str	r2, [r3, #0]
}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000918 	.word	0x20000918
 8005500:	20000d78 	.word	0x20000d78
 8005504:	20000d8c 	.word	0x20000d8c
 8005508:	20000da8 	.word	0x20000da8
 800550c:	20000dbc 	.word	0x20000dbc
 8005510:	20000dd4 	.word	0x20000dd4
 8005514:	20000da0 	.word	0x20000da0
 8005518:	20000da4 	.word	0x20000da4

0800551c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005522:	e019      	b.n	8005558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005524:	f000 fde8 	bl	80060f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005528:	4b10      	ldr	r3, [pc, #64]	@ (800556c <prvCheckTasksWaitingTermination+0x50>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe fc01 	bl	8003d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <prvCheckTasksWaitingTermination+0x54>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a0b      	ldr	r2, [pc, #44]	@ (8005570 <prvCheckTasksWaitingTermination+0x54>)
 8005542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005544:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <prvCheckTasksWaitingTermination+0x58>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3b01      	subs	r3, #1
 800554a:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <prvCheckTasksWaitingTermination+0x58>)
 800554c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800554e:	f000 fe05 	bl	800615c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f810 	bl	8005578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005558:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <prvCheckTasksWaitingTermination+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e1      	bne.n	8005524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000dbc 	.word	0x20000dbc
 8005570:	20000de8 	.word	0x20000de8
 8005574:	20000dd0 	.word	0x20000dd0

08005578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3354      	adds	r3, #84	@ 0x54
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f8cf 	bl	8006728 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005590:	2b00      	cmp	r3, #0
 8005592:	d108      	bne.n	80055a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005598:	4618      	mov	r0, r3
 800559a:	f000 ff9d 	bl	80064d8 <vPortFree>
				vPortFree( pxTCB );
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 ff9a 	bl	80064d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055a4:	e019      	b.n	80055da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d103      	bne.n	80055b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 ff91 	bl	80064d8 <vPortFree>
	}
 80055b6:	e010      	b.n	80055da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d00b      	beq.n	80055da <prvDeleteTCB+0x62>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60fb      	str	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <prvDeleteTCB+0x5e>
	}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ea:	4b0c      	ldr	r3, [pc, #48]	@ (800561c <prvResetNextTaskUnblockTime+0x38>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <prvResetNextTaskUnblockTime+0x3c>)
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055fc:	e008      	b.n	8005610 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <prvResetNextTaskUnblockTime+0x38>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	4a04      	ldr	r2, [pc, #16]	@ (8005620 <prvResetNextTaskUnblockTime+0x3c>)
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000da0 	.word	0x20000da0
 8005620:	20000e08 	.word	0x20000e08

08005624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800562a:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <xTaskGetSchedulerState+0x34>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005632:	2301      	movs	r3, #1
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	e008      	b.n	800564a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005638:	4b08      	ldr	r3, [pc, #32]	@ (800565c <xTaskGetSchedulerState+0x38>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005640:	2302      	movs	r3, #2
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	e001      	b.n	800564a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005646:	2300      	movs	r3, #0
 8005648:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800564a:	687b      	ldr	r3, [r7, #4]
	}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	20000df4 	.word	0x20000df4
 800565c:	20000e10 	.word	0x20000e10

08005660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d058      	beq.n	8005728 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005676:	4b2f      	ldr	r3, [pc, #188]	@ (8005734 <xTaskPriorityDisinherit+0xd4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d00b      	beq.n	8005698 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60fb      	str	r3, [r7, #12]
}
 8005692:	bf00      	nop
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60bb      	str	r3, [r7, #8]
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056bc:	1e5a      	subs	r2, r3, #1
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d02c      	beq.n	8005728 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d128      	bne.n	8005728 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	3304      	adds	r3, #4
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fb2e 	bl	8003d3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005738 <xTaskPriorityDisinherit+0xd8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d903      	bls.n	8005708 <xTaskPriorityDisinherit+0xa8>
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	4a0c      	ldr	r2, [pc, #48]	@ (8005738 <xTaskPriorityDisinherit+0xd8>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a09      	ldr	r2, [pc, #36]	@ (800573c <xTaskPriorityDisinherit+0xdc>)
 8005716:	441a      	add	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fe faaf 	bl	8003c82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005728:	697b      	ldr	r3, [r7, #20]
	}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000914 	.word	0x20000914
 8005738:	20000df0 	.word	0x20000df0
 800573c:	20000918 	.word	0x20000918

08005740 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800574a:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005750:	4b20      	ldr	r3, [pc, #128]	@ (80057d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3304      	adds	r3, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe faf0 	bl	8003d3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d10a      	bne.n	800577a <prvAddCurrentTaskToDelayedList+0x3a>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576a:	4b1a      	ldr	r3, [pc, #104]	@ (80057d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4819      	ldr	r0, [pc, #100]	@ (80057d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005774:	f7fe fa85 	bl	8003c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005778:	e026      	b.n	80057c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4413      	add	r3, r2
 8005780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	429a      	cmp	r2, r3
 8005790:	d209      	bcs.n	80057a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f7fe fa93 	bl	8003cca <vListInsert>
}
 80057a4:	e010      	b.n	80057c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057a6:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b0a      	ldr	r3, [pc, #40]	@ (80057d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7fe fa89 	bl	8003cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057b8:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d202      	bcs.n	80057c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057c2:	4a08      	ldr	r2, [pc, #32]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6013      	str	r3, [r2, #0]
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000dec 	.word	0x20000dec
 80057d4:	20000914 	.word	0x20000914
 80057d8:	20000dd4 	.word	0x20000dd4
 80057dc:	20000da4 	.word	0x20000da4
 80057e0:	20000da0 	.word	0x20000da0
 80057e4:	20000e08 	.word	0x20000e08

080057e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	@ 0x28
 80057ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057f2:	f000 fb13 	bl	8005e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057f6:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <xTimerCreateTimerTask+0x84>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d021      	beq.n	8005842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005806:	1d3a      	adds	r2, r7, #4
 8005808:	f107 0108 	add.w	r1, r7, #8
 800580c:	f107 030c 	add.w	r3, r7, #12
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe f9ef 	bl	8003bf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	9202      	str	r2, [sp, #8]
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	2302      	movs	r3, #2
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	460a      	mov	r2, r1
 8005828:	4911      	ldr	r1, [pc, #68]	@ (8005870 <xTimerCreateTimerTask+0x88>)
 800582a:	4812      	ldr	r0, [pc, #72]	@ (8005874 <xTimerCreateTimerTask+0x8c>)
 800582c:	f7ff f8a2 	bl	8004974 <xTaskCreateStatic>
 8005830:	4603      	mov	r3, r0
 8005832:	4a11      	ldr	r2, [pc, #68]	@ (8005878 <xTimerCreateTimerTask+0x90>)
 8005834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005836:	4b10      	ldr	r3, [pc, #64]	@ (8005878 <xTimerCreateTimerTask+0x90>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	613b      	str	r3, [r7, #16]
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005860:	697b      	ldr	r3, [r7, #20]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000e44 	.word	0x20000e44
 8005870:	08006980 	.word	0x08006980
 8005874:	080059b5 	.word	0x080059b5
 8005878:	20000e48 	.word	0x20000e48

0800587c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xTimerGenericCommand+0x30>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058ac:	4b19      	ldr	r3, [pc, #100]	@ (8005914 <xTimerGenericCommand+0x98>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02a      	beq.n	800590a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b05      	cmp	r3, #5
 80058c4:	dc18      	bgt.n	80058f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058c6:	f7ff fead 	bl	8005624 <xTaskGetSchedulerState>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d109      	bne.n	80058e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058d0:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <xTimerGenericCommand+0x98>)
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	f107 0110 	add.w	r1, r7, #16
 80058d8:	2300      	movs	r3, #0
 80058da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058dc:	f7fe fc0c 	bl	80040f8 <xQueueGenericSend>
 80058e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80058e2:	e012      	b.n	800590a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <xTimerGenericCommand+0x98>)
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	f107 0110 	add.w	r1, r7, #16
 80058ec:	2300      	movs	r3, #0
 80058ee:	2200      	movs	r2, #0
 80058f0:	f7fe fc02 	bl	80040f8 <xQueueGenericSend>
 80058f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80058f6:	e008      	b.n	800590a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058f8:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <xTimerGenericCommand+0x98>)
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	f107 0110 	add.w	r1, r7, #16
 8005900:	2300      	movs	r3, #0
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	f7fe fcfa 	bl	80042fc <xQueueGenericSendFromISR>
 8005908:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800590c:	4618      	mov	r0, r3
 800590e:	3728      	adds	r7, #40	@ 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000e44 	.word	0x20000e44

08005918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af02      	add	r7, sp, #8
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005922:	4b23      	ldr	r3, [pc, #140]	@ (80059b0 <prvProcessExpiredTimer+0x98>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3304      	adds	r3, #4
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fa03 	bl	8003d3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d023      	beq.n	800598c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	18d1      	adds	r1, r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	6978      	ldr	r0, [r7, #20]
 8005952:	f000 f8d5 	bl	8005b00 <prvInsertTimerInActiveList>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800595c:	2300      	movs	r3, #0
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	2100      	movs	r1, #0
 8005966:	6978      	ldr	r0, [r7, #20]
 8005968:	f7ff ff88 	bl	800587c <xTimerGenericCommand>
 800596c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d114      	bne.n	800599e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	4798      	blx	r3
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000e3c 	.word	0x20000e3c

080059b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f859 	bl	8005a78 <prvGetNextExpireTime>
 80059c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4619      	mov	r1, r3
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f805 	bl	80059dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059d2:	f000 f8d7 	bl	8005b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059d6:	bf00      	nop
 80059d8:	e7f0      	b.n	80059bc <prvTimerTask+0x8>
	...

080059dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059e6:	f7ff fa29 	bl	8004e3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ea:	f107 0308 	add.w	r3, r7, #8
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f866 	bl	8005ac0 <prvSampleTimeNow>
 80059f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d130      	bne.n	8005a5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <prvProcessTimerOrBlockTask+0x3c>
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d806      	bhi.n	8005a18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a0a:	f7ff fa25 	bl	8004e58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff81 	bl	8005918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a16:	e024      	b.n	8005a62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a1e:	4b13      	ldr	r3, [pc, #76]	@ (8005a6c <prvProcessTimerOrBlockTask+0x90>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <prvProcessTimerOrBlockTask+0x50>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <prvProcessTimerOrBlockTask+0x52>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <prvProcessTimerOrBlockTask+0x94>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f7fe ff65 	bl	800490c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a42:	f7ff fa09 	bl	8004e58 <xTaskResumeAll>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a4c:	4b09      	ldr	r3, [pc, #36]	@ (8005a74 <prvProcessTimerOrBlockTask+0x98>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
}
 8005a5c:	e001      	b.n	8005a62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a5e:	f7ff f9fb 	bl	8004e58 <xTaskResumeAll>
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000e40 	.word	0x20000e40
 8005a70:	20000e44 	.word	0x20000e44
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a80:	4b0e      	ldr	r3, [pc, #56]	@ (8005abc <prvGetNextExpireTime+0x44>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <prvGetNextExpireTime+0x16>
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	e000      	b.n	8005a90 <prvGetNextExpireTime+0x18>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d105      	bne.n	8005aa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a9c:	4b07      	ldr	r3, [pc, #28]	@ (8005abc <prvGetNextExpireTime+0x44>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	e001      	b.n	8005aac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005aac:	68fb      	ldr	r3, [r7, #12]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000e3c 	.word	0x20000e3c

08005ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ac8:	f7ff fa64 	bl	8004f94 <xTaskGetTickCount>
 8005acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ace:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <prvSampleTimeNow+0x3c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d205      	bcs.n	8005ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ad8:	f000 f93a 	bl	8005d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005aea:	4a04      	ldr	r2, [pc, #16]	@ (8005afc <prvSampleTimeNow+0x3c>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005af0:	68fb      	ldr	r3, [r7, #12]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000e4c 	.word	0x20000e4c

08005b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d812      	bhi.n	8005b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e01b      	b.n	8005b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b3a:	4b10      	ldr	r3, [pc, #64]	@ (8005b7c <prvInsertTimerInActiveList+0x7c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f7fe f8c0 	bl	8003cca <vListInsert>
 8005b4a:	e012      	b.n	8005b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d206      	bcs.n	8005b62 <prvInsertTimerInActiveList+0x62>
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d302      	bcc.n	8005b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e007      	b.n	8005b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b62:	4b07      	ldr	r3, [pc, #28]	@ (8005b80 <prvInsertTimerInActiveList+0x80>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7fe f8ac 	bl	8003cca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b72:	697b      	ldr	r3, [r7, #20]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000e40 	.word	0x20000e40
 8005b80:	20000e3c 	.word	0x20000e3c

08005b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08e      	sub	sp, #56	@ 0x38
 8005b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b8a:	e0ce      	b.n	8005d2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	da19      	bge.n	8005bc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b92:	1d3b      	adds	r3, r7, #4
 8005b94:	3304      	adds	r3, #4
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	61fb      	str	r3, [r7, #28]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bbc:	6850      	ldr	r0, [r2, #4]
 8005bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bc0:	6892      	ldr	r2, [r2, #8]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f2c0 80ae 	blt.w	8005d2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe f8ac 	bl	8003d3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005be4:	463b      	mov	r3, r7
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff ff6a 	bl	8005ac0 <prvSampleTimeNow>
 8005bec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	f200 8097 	bhi.w	8005d24 <prvProcessReceivedCommands+0x1a0>
 8005bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bfc <prvProcessReceivedCommands+0x78>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c25 	.word	0x08005c25
 8005c08:	08005c9b 	.word	0x08005c9b
 8005c0c:	08005caf 	.word	0x08005caf
 8005c10:	08005cfb 	.word	0x08005cfb
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c25 	.word	0x08005c25
 8005c1c:	08005c9b 	.word	0x08005c9b
 8005c20:	08005caf 	.word	0x08005caf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	18d1      	adds	r1, r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c44:	f7ff ff5c 	bl	8005b00 <prvInsertTimerInActiveList>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d06c      	beq.n	8005d28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d061      	beq.n	8005d28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	441a      	add	r2, r3
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	2300      	movs	r3, #0
 8005c72:	2100      	movs	r1, #0
 8005c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c76:	f7ff fe01 	bl	800587c <xTimerGenericCommand>
 8005c7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d152      	bne.n	8005d28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	61bb      	str	r3, [r7, #24]
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	e7fd      	b.n	8005c96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005cac:	e03d      	b.n	8005d2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	18d1      	adds	r1, r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cf4:	f7ff ff04 	bl	8005b00 <prvInsertTimerInActiveList>
					break;
 8005cf8:	e017      	b.n	8005d2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d0a:	f000 fbe5 	bl	80064d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d0e:	e00c      	b.n	8005d2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d22:	e002      	b.n	8005d2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005d24:	bf00      	nop
 8005d26:	e000      	b.n	8005d2a <prvProcessReceivedCommands+0x1a6>
					break;
 8005d28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d2a:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <prvProcessReceivedCommands+0x1c8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1d39      	adds	r1, r7, #4
 8005d30:	2200      	movs	r2, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fb80 	bl	8004438 <xQueueReceive>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f af26 	bne.w	8005b8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	3730      	adds	r7, #48	@ 0x30
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000e44 	.word	0x20000e44

08005d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d56:	e049      	b.n	8005dec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d58:	4b2e      	ldr	r3, [pc, #184]	@ (8005e14 <prvSwitchTimerLists+0xc4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b2c      	ldr	r3, [pc, #176]	@ (8005e14 <prvSwitchTimerLists+0xc4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fd ffe3 	bl	8003d3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02f      	beq.n	8005dec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d90e      	bls.n	8005dbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005daa:	4b1a      	ldr	r3, [pc, #104]	@ (8005e14 <prvSwitchTimerLists+0xc4>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3304      	adds	r3, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f7fd ff88 	bl	8003cca <vListInsert>
 8005dba:	e017      	b.n	8005dec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fd58 	bl	800587c <xTimerGenericCommand>
 8005dcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	603b      	str	r3, [r7, #0]
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dec:	4b09      	ldr	r3, [pc, #36]	@ (8005e14 <prvSwitchTimerLists+0xc4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1b0      	bne.n	8005d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005df6:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <prvSwitchTimerLists+0xc4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <prvSwitchTimerLists+0xc8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a04      	ldr	r2, [pc, #16]	@ (8005e14 <prvSwitchTimerLists+0xc4>)
 8005e02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e04:	4a04      	ldr	r2, [pc, #16]	@ (8005e18 <prvSwitchTimerLists+0xc8>)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6013      	str	r3, [r2, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000e3c 	.word	0x20000e3c
 8005e18:	20000e40 	.word	0x20000e40

08005e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e22:	f000 f969 	bl	80060f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e26:	4b15      	ldr	r3, [pc, #84]	@ (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d120      	bne.n	8005e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e2e:	4814      	ldr	r0, [pc, #80]	@ (8005e80 <prvCheckForValidListAndQueue+0x64>)
 8005e30:	f7fd fefa 	bl	8003c28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e34:	4813      	ldr	r0, [pc, #76]	@ (8005e84 <prvCheckForValidListAndQueue+0x68>)
 8005e36:	f7fd fef7 	bl	8003c28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e3a:	4b13      	ldr	r3, [pc, #76]	@ (8005e88 <prvCheckForValidListAndQueue+0x6c>)
 8005e3c:	4a10      	ldr	r2, [pc, #64]	@ (8005e80 <prvCheckForValidListAndQueue+0x64>)
 8005e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e40:	4b12      	ldr	r3, [pc, #72]	@ (8005e8c <prvCheckForValidListAndQueue+0x70>)
 8005e42:	4a10      	ldr	r2, [pc, #64]	@ (8005e84 <prvCheckForValidListAndQueue+0x68>)
 8005e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e46:	2300      	movs	r3, #0
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <prvCheckForValidListAndQueue+0x74>)
 8005e4c:	4a11      	ldr	r2, [pc, #68]	@ (8005e94 <prvCheckForValidListAndQueue+0x78>)
 8005e4e:	2110      	movs	r1, #16
 8005e50:	200a      	movs	r0, #10
 8005e52:	f7fe f807 	bl	8003e64 <xQueueGenericCreateStatic>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4a08      	ldr	r2, [pc, #32]	@ (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e5c:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	490b      	ldr	r1, [pc, #44]	@ (8005e98 <prvCheckForValidListAndQueue+0x7c>)
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fcfa 	bl	8004864 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e70:	f000 f974 	bl	800615c <vPortExitCritical>
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000e44 	.word	0x20000e44
 8005e80:	20000e14 	.word	0x20000e14
 8005e84:	20000e28 	.word	0x20000e28
 8005e88:	20000e3c 	.word	0x20000e3c
 8005e8c:	20000e40 	.word	0x20000e40
 8005e90:	20000ef0 	.word	0x20000ef0
 8005e94:	20000e50 	.word	0x20000e50
 8005e98:	08006988 	.word	0x08006988

08005e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b04      	subs	r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f023 0201 	bic.w	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3b04      	subs	r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8005f00 <pxPortInitialiseStack+0x64>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3b14      	subs	r3, #20
 8005ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f06f 0202 	mvn.w	r2, #2
 8005eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3b20      	subs	r3, #32
 8005ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	08005f05 	.word	0x08005f05

08005f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f0e:	4b13      	ldr	r3, [pc, #76]	@ (8005f5c <prvTaskExitError+0x58>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d00b      	beq.n	8005f30 <prvTaskExitError+0x2c>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	60fb      	str	r3, [r7, #12]
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <prvTaskExitError+0x28>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	60bb      	str	r3, [r7, #8]
}
 8005f42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f44:	bf00      	nop
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0fc      	beq.n	8005f46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	2000000c 	.word	0x2000000c

08005f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f60:	4b07      	ldr	r3, [pc, #28]	@ (8005f80 <pxCurrentTCBConst2>)
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	f380 8809 	msr	PSP, r0
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8811 	msr	BASEPRI, r0
 8005f7a:	4770      	bx	lr
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst2>:
 8005f80:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f88:	4808      	ldr	r0, [pc, #32]	@ (8005fac <prvPortStartFirstTask+0x24>)
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f380 8808 	msr	MSP, r0
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8814 	msr	CONTROL, r0
 8005f9a:	b662      	cpsie	i
 8005f9c:	b661      	cpsie	f
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	df00      	svc	0
 8005fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005faa:	bf00      	nop
 8005fac:	e000ed08 	.word	0xe000ed08

08005fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fb6:	4b47      	ldr	r3, [pc, #284]	@ (80060d4 <xPortStartScheduler+0x124>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a47      	ldr	r2, [pc, #284]	@ (80060d8 <xPortStartScheduler+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10b      	bne.n	8005fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80060d4 <xPortStartScheduler+0x124>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80060dc <xPortStartScheduler+0x12c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10b      	bne.n	8005ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	613b      	str	r3, [r7, #16]
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	e7fd      	b.n	8005ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ffa:	4b39      	ldr	r3, [pc, #228]	@ (80060e0 <xPortStartScheduler+0x130>)
 8005ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	22ff      	movs	r2, #255	@ 0xff
 800600a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800601c:	b2da      	uxtb	r2, r3
 800601e:	4b31      	ldr	r3, [pc, #196]	@ (80060e4 <xPortStartScheduler+0x134>)
 8006020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006022:	4b31      	ldr	r3, [pc, #196]	@ (80060e8 <xPortStartScheduler+0x138>)
 8006024:	2207      	movs	r2, #7
 8006026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006028:	e009      	b.n	800603e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800602a:	4b2f      	ldr	r3, [pc, #188]	@ (80060e8 <xPortStartScheduler+0x138>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3b01      	subs	r3, #1
 8006030:	4a2d      	ldr	r2, [pc, #180]	@ (80060e8 <xPortStartScheduler+0x138>)
 8006032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006046:	2b80      	cmp	r3, #128	@ 0x80
 8006048:	d0ef      	beq.n	800602a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800604a:	4b27      	ldr	r3, [pc, #156]	@ (80060e8 <xPortStartScheduler+0x138>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1c3 0307 	rsb	r3, r3, #7
 8006052:	2b04      	cmp	r3, #4
 8006054:	d00b      	beq.n	800606e <xPortStartScheduler+0xbe>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60bb      	str	r3, [r7, #8]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800606e:	4b1e      	ldr	r3, [pc, #120]	@ (80060e8 <xPortStartScheduler+0x138>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	4a1c      	ldr	r2, [pc, #112]	@ (80060e8 <xPortStartScheduler+0x138>)
 8006076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006078:	4b1b      	ldr	r3, [pc, #108]	@ (80060e8 <xPortStartScheduler+0x138>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006080:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <xPortStartScheduler+0x138>)
 8006082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800608c:	4b17      	ldr	r3, [pc, #92]	@ (80060ec <xPortStartScheduler+0x13c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <xPortStartScheduler+0x13c>)
 8006092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006098:	4b14      	ldr	r3, [pc, #80]	@ (80060ec <xPortStartScheduler+0x13c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a13      	ldr	r2, [pc, #76]	@ (80060ec <xPortStartScheduler+0x13c>)
 800609e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060a4:	f000 f8da 	bl	800625c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060a8:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <xPortStartScheduler+0x140>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060ae:	f000 f8f9 	bl	80062a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060b2:	4b10      	ldr	r3, [pc, #64]	@ (80060f4 <xPortStartScheduler+0x144>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a0f      	ldr	r2, [pc, #60]	@ (80060f4 <xPortStartScheduler+0x144>)
 80060b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060be:	f7ff ff63 	bl	8005f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060c2:	f7ff f831 	bl	8005128 <vTaskSwitchContext>
	prvTaskExitError();
 80060c6:	f7ff ff1d 	bl	8005f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000ed00 	.word	0xe000ed00
 80060d8:	410fc271 	.word	0x410fc271
 80060dc:	410fc270 	.word	0x410fc270
 80060e0:	e000e400 	.word	0xe000e400
 80060e4:	20000f40 	.word	0x20000f40
 80060e8:	20000f44 	.word	0x20000f44
 80060ec:	e000ed20 	.word	0xe000ed20
 80060f0:	2000000c 	.word	0x2000000c
 80060f4:	e000ef34 	.word	0xe000ef34

080060f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	607b      	str	r3, [r7, #4]
}
 8006110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006112:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <vPortEnterCritical+0x5c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	4a0e      	ldr	r2, [pc, #56]	@ (8006154 <vPortEnterCritical+0x5c>)
 800611a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800611c:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <vPortEnterCritical+0x5c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d110      	bne.n	8006146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006124:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <vPortEnterCritical+0x60>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <vPortEnterCritical+0x4e>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	603b      	str	r3, [r7, #0]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <vPortEnterCritical+0x4a>
	}
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	2000000c 	.word	0x2000000c
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006162:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <vPortExitCritical+0x50>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <vPortExitCritical+0x26>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	607b      	str	r3, [r7, #4]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006182:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <vPortExitCritical+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3b01      	subs	r3, #1
 8006188:	4a08      	ldr	r2, [pc, #32]	@ (80061ac <vPortExitCritical+0x50>)
 800618a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <vPortExitCritical+0x50>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <vPortExitCritical+0x44>
 8006194:	2300      	movs	r3, #0
 8006196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	2000000c 	.word	0x2000000c

080061b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061b0:	f3ef 8009 	mrs	r0, PSP
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4b15      	ldr	r3, [pc, #84]	@ (8006210 <pxCurrentTCBConst>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	f01e 0f10 	tst.w	lr, #16
 80061c0:	bf08      	it	eq
 80061c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	6010      	str	r0, [r2, #0]
 80061cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061d4:	f380 8811 	msr	BASEPRI, r0
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f7fe ffa2 	bl	8005128 <vTaskSwitchContext>
 80061e4:	f04f 0000 	mov.w	r0, #0
 80061e8:	f380 8811 	msr	BASEPRI, r0
 80061ec:	bc09      	pop	{r0, r3}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6808      	ldr	r0, [r1, #0]
 80061f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f6:	f01e 0f10 	tst.w	lr, #16
 80061fa:	bf08      	it	eq
 80061fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006200:	f380 8809 	msr	PSP, r0
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	f3af 8000 	nop.w

08006210 <pxCurrentTCBConst>:
 8006210:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006232:	f7fe febf 	bl	8004fb4 <xTaskIncrementTick>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <xPortSysTickHandler+0x40>)
 800623e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006260:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006266:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <vPortSetupTimerInterrupt+0x38>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800626c:	4b0a      	ldr	r3, [pc, #40]	@ (8006298 <vPortSetupTimerInterrupt+0x3c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0a      	ldr	r2, [pc, #40]	@ (800629c <vPortSetupTimerInterrupt+0x40>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	099b      	lsrs	r3, r3, #6
 8006278:	4a09      	ldr	r2, [pc, #36]	@ (80062a0 <vPortSetupTimerInterrupt+0x44>)
 800627a:	3b01      	subs	r3, #1
 800627c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800627e:	4b04      	ldr	r3, [pc, #16]	@ (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	e000e010 	.word	0xe000e010
 8006294:	e000e018 	.word	0xe000e018
 8006298:	20000000 	.word	0x20000000
 800629c:	10624dd3 	.word	0x10624dd3
 80062a0:	e000e014 	.word	0xe000e014

080062a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80062b4 <vPortEnableVFP+0x10>
 80062a8:	6801      	ldr	r1, [r0, #0]
 80062aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062ae:	6001      	str	r1, [r0, #0]
 80062b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062b2:	bf00      	nop
 80062b4:	e000ed88 	.word	0xe000ed88

080062b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062be:	f3ef 8305 	mrs	r3, IPSR
 80062c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	d915      	bls.n	80062f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ca:	4a18      	ldr	r2, [pc, #96]	@ (800632c <vPortValidateInterruptPriority+0x74>)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062d4:	4b16      	ldr	r3, [pc, #88]	@ (8006330 <vPortValidateInterruptPriority+0x78>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	7afa      	ldrb	r2, [r7, #11]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20b      	bcs.n	80062f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006334 <vPortValidateInterruptPriority+0x7c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006338 <vPortValidateInterruptPriority+0x80>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d90b      	bls.n	800631e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	603b      	str	r3, [r7, #0]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <vPortValidateInterruptPriority+0x62>
	}
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	e000e3f0 	.word	0xe000e3f0
 8006330:	20000f40 	.word	0x20000f40
 8006334:	e000ed0c 	.word	0xe000ed0c
 8006338:	20000f44 	.word	0x20000f44

0800633c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	@ 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006348:	f7fe fd78 	bl	8004e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800634c:	4b5c      	ldr	r3, [pc, #368]	@ (80064c0 <pvPortMalloc+0x184>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006354:	f000 f924 	bl	80065a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006358:	4b5a      	ldr	r3, [pc, #360]	@ (80064c4 <pvPortMalloc+0x188>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4013      	ands	r3, r2
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 8095 	bne.w	8006490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01e      	beq.n	80063aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800636c:	2208      	movs	r2, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	2b00      	cmp	r3, #0
 800637c:	d015      	beq.n	80063aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f023 0307 	bic.w	r3, r3, #7
 8006384:	3308      	adds	r3, #8
 8006386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <pvPortMalloc+0x6e>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	617b      	str	r3, [r7, #20]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d06f      	beq.n	8006490 <pvPortMalloc+0x154>
 80063b0:	4b45      	ldr	r3, [pc, #276]	@ (80064c8 <pvPortMalloc+0x18c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d86a      	bhi.n	8006490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063ba:	4b44      	ldr	r3, [pc, #272]	@ (80064cc <pvPortMalloc+0x190>)
 80063bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063be:	4b43      	ldr	r3, [pc, #268]	@ (80064cc <pvPortMalloc+0x190>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063c4:	e004      	b.n	80063d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d903      	bls.n	80063e2 <pvPortMalloc+0xa6>
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f1      	bne.n	80063c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063e2:	4b37      	ldr	r3, [pc, #220]	@ (80064c0 <pvPortMalloc+0x184>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d051      	beq.n	8006490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2208      	movs	r2, #8
 80063f2:	4413      	add	r3, r2
 80063f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	2308      	movs	r3, #8
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	429a      	cmp	r2, r3
 800640c:	d920      	bls.n	8006450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800640e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <pvPortMalloc+0xfc>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	613b      	str	r3, [r7, #16]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800644a:	69b8      	ldr	r0, [r7, #24]
 800644c:	f000 f90a 	bl	8006664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006450:	4b1d      	ldr	r3, [pc, #116]	@ (80064c8 <pvPortMalloc+0x18c>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	4a1b      	ldr	r2, [pc, #108]	@ (80064c8 <pvPortMalloc+0x18c>)
 800645c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800645e:	4b1a      	ldr	r3, [pc, #104]	@ (80064c8 <pvPortMalloc+0x18c>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b1b      	ldr	r3, [pc, #108]	@ (80064d0 <pvPortMalloc+0x194>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d203      	bcs.n	8006472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800646a:	4b17      	ldr	r3, [pc, #92]	@ (80064c8 <pvPortMalloc+0x18c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a18      	ldr	r2, [pc, #96]	@ (80064d0 <pvPortMalloc+0x194>)
 8006470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	4b13      	ldr	r3, [pc, #76]	@ (80064c4 <pvPortMalloc+0x188>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	431a      	orrs	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006486:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <pvPortMalloc+0x198>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	4a11      	ldr	r2, [pc, #68]	@ (80064d4 <pvPortMalloc+0x198>)
 800648e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006490:	f7fe fce2 	bl	8004e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00b      	beq.n	80064b6 <pvPortMalloc+0x17a>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <pvPortMalloc+0x176>
	return pvReturn;
 80064b6:	69fb      	ldr	r3, [r7, #28]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	@ 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20004b50 	.word	0x20004b50
 80064c4:	20004b64 	.word	0x20004b64
 80064c8:	20004b54 	.word	0x20004b54
 80064cc:	20004b48 	.word	0x20004b48
 80064d0:	20004b58 	.word	0x20004b58
 80064d4:	20004b5c 	.word	0x20004b5c

080064d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d04f      	beq.n	800658a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064ea:	2308      	movs	r3, #8
 80064ec:	425b      	negs	r3, r3
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4b25      	ldr	r3, [pc, #148]	@ (8006594 <vPortFree+0xbc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <vPortFree+0x46>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	60fb      	str	r3, [r7, #12]
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	e7fd      	b.n	800651a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <vPortFree+0x66>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60bb      	str	r3, [r7, #8]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	4b14      	ldr	r3, [pc, #80]	@ (8006594 <vPortFree+0xbc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01e      	beq.n	800658a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11a      	bne.n	800658a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	4b0e      	ldr	r3, [pc, #56]	@ (8006594 <vPortFree+0xbc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	43db      	mvns	r3, r3
 800655e:	401a      	ands	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006564:	f7fe fc6a 	bl	8004e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	4b0a      	ldr	r3, [pc, #40]	@ (8006598 <vPortFree+0xc0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4413      	add	r3, r2
 8006572:	4a09      	ldr	r2, [pc, #36]	@ (8006598 <vPortFree+0xc0>)
 8006574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006576:	6938      	ldr	r0, [r7, #16]
 8006578:	f000 f874 	bl	8006664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800657c:	4b07      	ldr	r3, [pc, #28]	@ (800659c <vPortFree+0xc4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3301      	adds	r3, #1
 8006582:	4a06      	ldr	r2, [pc, #24]	@ (800659c <vPortFree+0xc4>)
 8006584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006586:	f7fe fc67 	bl	8004e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800658a:	bf00      	nop
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20004b64 	.word	0x20004b64
 8006598:	20004b54 	.word	0x20004b54
 800659c:	20004b60 	.word	0x20004b60

080065a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80065aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065ac:	4b27      	ldr	r3, [pc, #156]	@ (800664c <prvHeapInit+0xac>)
 80065ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3307      	adds	r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0307 	bic.w	r3, r3, #7
 80065c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	4a1f      	ldr	r2, [pc, #124]	@ (800664c <prvHeapInit+0xac>)
 80065d0:	4413      	add	r3, r2
 80065d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <prvHeapInit+0xb0>)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065de:	4b1c      	ldr	r3, [pc, #112]	@ (8006650 <prvHeapInit+0xb0>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	4413      	add	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065ec:	2208      	movs	r2, #8
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a15      	ldr	r2, [pc, #84]	@ (8006654 <prvHeapInit+0xb4>)
 8006600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006602:	4b14      	ldr	r3, [pc, #80]	@ (8006654 <prvHeapInit+0xb4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800660a:	4b12      	ldr	r3, [pc, #72]	@ (8006654 <prvHeapInit+0xb4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006620:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <prvHeapInit+0xb4>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4a0a      	ldr	r2, [pc, #40]	@ (8006658 <prvHeapInit+0xb8>)
 800662e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4a09      	ldr	r2, [pc, #36]	@ (800665c <prvHeapInit+0xbc>)
 8006636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006638:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <prvHeapInit+0xc0>)
 800663a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800663e:	601a      	str	r2, [r3, #0]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	20000f48 	.word	0x20000f48
 8006650:	20004b48 	.word	0x20004b48
 8006654:	20004b50 	.word	0x20004b50
 8006658:	20004b58 	.word	0x20004b58
 800665c:	20004b54 	.word	0x20004b54
 8006660:	20004b64 	.word	0x20004b64

08006664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800666c:	4b28      	ldr	r3, [pc, #160]	@ (8006710 <prvInsertBlockIntoFreeList+0xac>)
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e002      	b.n	8006678 <prvInsertBlockIntoFreeList+0x14>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d8f7      	bhi.n	8006672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4413      	add	r3, r2
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d108      	bne.n	80066a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	441a      	add	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d118      	bne.n	80066ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b15      	ldr	r3, [pc, #84]	@ (8006714 <prvInsertBlockIntoFreeList+0xb0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d00d      	beq.n	80066e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	441a      	add	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e008      	b.n	80066f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <prvInsertBlockIntoFreeList+0xb0>)
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e003      	b.n	80066f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d002      	beq.n	8006702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20004b48 	.word	0x20004b48
 8006714:	20004b50 	.word	0x20004b50

08006718 <memset>:
 8006718:	4402      	add	r2, r0
 800671a:	4603      	mov	r3, r0
 800671c:	4293      	cmp	r3, r2
 800671e:	d100      	bne.n	8006722 <memset+0xa>
 8006720:	4770      	bx	lr
 8006722:	f803 1b01 	strb.w	r1, [r3], #1
 8006726:	e7f9      	b.n	800671c <memset+0x4>

08006728 <_reclaim_reent>:
 8006728:	4b2d      	ldr	r3, [pc, #180]	@ (80067e0 <_reclaim_reent+0xb8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4283      	cmp	r3, r0
 800672e:	b570      	push	{r4, r5, r6, lr}
 8006730:	4604      	mov	r4, r0
 8006732:	d053      	beq.n	80067dc <_reclaim_reent+0xb4>
 8006734:	69c3      	ldr	r3, [r0, #28]
 8006736:	b31b      	cbz	r3, 8006780 <_reclaim_reent+0x58>
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	b163      	cbz	r3, 8006756 <_reclaim_reent+0x2e>
 800673c:	2500      	movs	r5, #0
 800673e:	69e3      	ldr	r3, [r4, #28]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	5959      	ldr	r1, [r3, r5]
 8006744:	b9b1      	cbnz	r1, 8006774 <_reclaim_reent+0x4c>
 8006746:	3504      	adds	r5, #4
 8006748:	2d80      	cmp	r5, #128	@ 0x80
 800674a:	d1f8      	bne.n	800673e <_reclaim_reent+0x16>
 800674c:	69e3      	ldr	r3, [r4, #28]
 800674e:	4620      	mov	r0, r4
 8006750:	68d9      	ldr	r1, [r3, #12]
 8006752:	f000 f87b 	bl	800684c <_free_r>
 8006756:	69e3      	ldr	r3, [r4, #28]
 8006758:	6819      	ldr	r1, [r3, #0]
 800675a:	b111      	cbz	r1, 8006762 <_reclaim_reent+0x3a>
 800675c:	4620      	mov	r0, r4
 800675e:	f000 f875 	bl	800684c <_free_r>
 8006762:	69e3      	ldr	r3, [r4, #28]
 8006764:	689d      	ldr	r5, [r3, #8]
 8006766:	b15d      	cbz	r5, 8006780 <_reclaim_reent+0x58>
 8006768:	4629      	mov	r1, r5
 800676a:	4620      	mov	r0, r4
 800676c:	682d      	ldr	r5, [r5, #0]
 800676e:	f000 f86d 	bl	800684c <_free_r>
 8006772:	e7f8      	b.n	8006766 <_reclaim_reent+0x3e>
 8006774:	680e      	ldr	r6, [r1, #0]
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f868 	bl	800684c <_free_r>
 800677c:	4631      	mov	r1, r6
 800677e:	e7e1      	b.n	8006744 <_reclaim_reent+0x1c>
 8006780:	6961      	ldr	r1, [r4, #20]
 8006782:	b111      	cbz	r1, 800678a <_reclaim_reent+0x62>
 8006784:	4620      	mov	r0, r4
 8006786:	f000 f861 	bl	800684c <_free_r>
 800678a:	69e1      	ldr	r1, [r4, #28]
 800678c:	b111      	cbz	r1, 8006794 <_reclaim_reent+0x6c>
 800678e:	4620      	mov	r0, r4
 8006790:	f000 f85c 	bl	800684c <_free_r>
 8006794:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006796:	b111      	cbz	r1, 800679e <_reclaim_reent+0x76>
 8006798:	4620      	mov	r0, r4
 800679a:	f000 f857 	bl	800684c <_free_r>
 800679e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067a0:	b111      	cbz	r1, 80067a8 <_reclaim_reent+0x80>
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 f852 	bl	800684c <_free_r>
 80067a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80067aa:	b111      	cbz	r1, 80067b2 <_reclaim_reent+0x8a>
 80067ac:	4620      	mov	r0, r4
 80067ae:	f000 f84d 	bl	800684c <_free_r>
 80067b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80067b4:	b111      	cbz	r1, 80067bc <_reclaim_reent+0x94>
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 f848 	bl	800684c <_free_r>
 80067bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80067be:	b111      	cbz	r1, 80067c6 <_reclaim_reent+0x9e>
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f843 	bl	800684c <_free_r>
 80067c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80067c8:	b111      	cbz	r1, 80067d0 <_reclaim_reent+0xa8>
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 f83e 	bl	800684c <_free_r>
 80067d0:	6a23      	ldr	r3, [r4, #32]
 80067d2:	b11b      	cbz	r3, 80067dc <_reclaim_reent+0xb4>
 80067d4:	4620      	mov	r0, r4
 80067d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067da:	4718      	bx	r3
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	bf00      	nop
 80067e0:	20000010 	.word	0x20000010

080067e4 <__libc_init_array>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4d0d      	ldr	r5, [pc, #52]	@ (800681c <__libc_init_array+0x38>)
 80067e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006820 <__libc_init_array+0x3c>)
 80067ea:	1b64      	subs	r4, r4, r5
 80067ec:	10a4      	asrs	r4, r4, #2
 80067ee:	2600      	movs	r6, #0
 80067f0:	42a6      	cmp	r6, r4
 80067f2:	d109      	bne.n	8006808 <__libc_init_array+0x24>
 80067f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006824 <__libc_init_array+0x40>)
 80067f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006828 <__libc_init_array+0x44>)
 80067f8:	f000 f87e 	bl	80068f8 <_init>
 80067fc:	1b64      	subs	r4, r4, r5
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	2600      	movs	r6, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d105      	bne.n	8006812 <__libc_init_array+0x2e>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	f855 3b04 	ldr.w	r3, [r5], #4
 800680c:	4798      	blx	r3
 800680e:	3601      	adds	r6, #1
 8006810:	e7ee      	b.n	80067f0 <__libc_init_array+0xc>
 8006812:	f855 3b04 	ldr.w	r3, [r5], #4
 8006816:	4798      	blx	r3
 8006818:	3601      	adds	r6, #1
 800681a:	e7f2      	b.n	8006802 <__libc_init_array+0x1e>
 800681c:	08006a60 	.word	0x08006a60
 8006820:	08006a60 	.word	0x08006a60
 8006824:	08006a60 	.word	0x08006a60
 8006828:	08006a64 	.word	0x08006a64

0800682c <__retarget_lock_acquire_recursive>:
 800682c:	4770      	bx	lr

0800682e <__retarget_lock_release_recursive>:
 800682e:	4770      	bx	lr

08006830 <memcpy>:
 8006830:	440a      	add	r2, r1
 8006832:	4291      	cmp	r1, r2
 8006834:	f100 33ff 	add.w	r3, r0, #4294967295
 8006838:	d100      	bne.n	800683c <memcpy+0xc>
 800683a:	4770      	bx	lr
 800683c:	b510      	push	{r4, lr}
 800683e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006846:	4291      	cmp	r1, r2
 8006848:	d1f9      	bne.n	800683e <memcpy+0xe>
 800684a:	bd10      	pop	{r4, pc}

0800684c <_free_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4605      	mov	r5, r0
 8006850:	2900      	cmp	r1, #0
 8006852:	d041      	beq.n	80068d8 <_free_r+0x8c>
 8006854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006858:	1f0c      	subs	r4, r1, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	bfb8      	it	lt
 800685e:	18e4      	addlt	r4, r4, r3
 8006860:	f000 f83e 	bl	80068e0 <__malloc_lock>
 8006864:	4a1d      	ldr	r2, [pc, #116]	@ (80068dc <_free_r+0x90>)
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	b933      	cbnz	r3, 8006878 <_free_r+0x2c>
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	6014      	str	r4, [r2, #0]
 800686e:	4628      	mov	r0, r5
 8006870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006874:	f000 b83a 	b.w	80068ec <__malloc_unlock>
 8006878:	42a3      	cmp	r3, r4
 800687a:	d908      	bls.n	800688e <_free_r+0x42>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	1821      	adds	r1, r4, r0
 8006880:	428b      	cmp	r3, r1
 8006882:	bf01      	itttt	eq
 8006884:	6819      	ldreq	r1, [r3, #0]
 8006886:	685b      	ldreq	r3, [r3, #4]
 8006888:	1809      	addeq	r1, r1, r0
 800688a:	6021      	streq	r1, [r4, #0]
 800688c:	e7ed      	b.n	800686a <_free_r+0x1e>
 800688e:	461a      	mov	r2, r3
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	b10b      	cbz	r3, 8006898 <_free_r+0x4c>
 8006894:	42a3      	cmp	r3, r4
 8006896:	d9fa      	bls.n	800688e <_free_r+0x42>
 8006898:	6811      	ldr	r1, [r2, #0]
 800689a:	1850      	adds	r0, r2, r1
 800689c:	42a0      	cmp	r0, r4
 800689e:	d10b      	bne.n	80068b8 <_free_r+0x6c>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	4401      	add	r1, r0
 80068a4:	1850      	adds	r0, r2, r1
 80068a6:	4283      	cmp	r3, r0
 80068a8:	6011      	str	r1, [r2, #0]
 80068aa:	d1e0      	bne.n	800686e <_free_r+0x22>
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	6053      	str	r3, [r2, #4]
 80068b2:	4408      	add	r0, r1
 80068b4:	6010      	str	r0, [r2, #0]
 80068b6:	e7da      	b.n	800686e <_free_r+0x22>
 80068b8:	d902      	bls.n	80068c0 <_free_r+0x74>
 80068ba:	230c      	movs	r3, #12
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	e7d6      	b.n	800686e <_free_r+0x22>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	1821      	adds	r1, r4, r0
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf04      	itt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	6063      	str	r3, [r4, #4]
 80068ce:	bf04      	itt	eq
 80068d0:	1809      	addeq	r1, r1, r0
 80068d2:	6021      	streq	r1, [r4, #0]
 80068d4:	6054      	str	r4, [r2, #4]
 80068d6:	e7ca      	b.n	800686e <_free_r+0x22>
 80068d8:	bd38      	pop	{r3, r4, r5, pc}
 80068da:	bf00      	nop
 80068dc:	20004ca4 	.word	0x20004ca4

080068e0 <__malloc_lock>:
 80068e0:	4801      	ldr	r0, [pc, #4]	@ (80068e8 <__malloc_lock+0x8>)
 80068e2:	f7ff bfa3 	b.w	800682c <__retarget_lock_acquire_recursive>
 80068e6:	bf00      	nop
 80068e8:	20004ca0 	.word	0x20004ca0

080068ec <__malloc_unlock>:
 80068ec:	4801      	ldr	r0, [pc, #4]	@ (80068f4 <__malloc_unlock+0x8>)
 80068ee:	f7ff bf9e 	b.w	800682e <__retarget_lock_release_recursive>
 80068f2:	bf00      	nop
 80068f4:	20004ca0 	.word	0x20004ca0

080068f8 <_init>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	bf00      	nop
 80068fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fe:	bc08      	pop	{r3}
 8006900:	469e      	mov	lr, r3
 8006902:	4770      	bx	lr

08006904 <_fini>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr
